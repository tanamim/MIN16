DEPTH = 32768;
WIDTH = 16;
ADDRESS_RADIX = HEX;
DATA_RADIX = HEX;
CONTENT
BEGIN
	0000 : 6080;    --   [0b 0110 0000 1000 0000] -> [42: ANDI  $sp, 0]
                    --   auto-gen (0xf000 > 5bits) <- [43: ORI   $sp, 0xf000]
	0001 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	0002 : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	0003 : 66fc;    --   [0b 0110 0110 1111 1100] -> [asm:  (I):  ORI 	$t1, 0x3c]
	0004 : 72ca;    --   [0b 0111 0010 1100 1010] -> [asm:  (I):  SLLI 	$t1, 0xa]
	0005 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	0006 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	0007 : 66c0;    --   [0b 0110 0110 1100 0000] -> [asm:  (I):  ORI 	$t1, 0x0]
	0008 : 72c6;    --   [0b 0111 0010 1100 0110] -> [asm:  (I):  SLLI 	$t1, 0x6]
	0009 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	000a : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	000b : 66c0;    --   [0b 0110 0110 1100 0000] -> [asm:  (I):  ORI 	$t1, 0x0]
	000c : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	000d : 2484;    --   [0b 0010 0100 1000 0100] -> [asm: (R2):  OR 	$sp, $at]

	000e : 60c0;    --   [0b 0110 0000 1100 0000] -> [44: ANDI  $fp, 0]
	000f : 24c8;    --   [0b 0010 0100 1100 1000] -> [45: OR    $fp, $sp]
                    --   label: 0010 <- [48: BIT_SERIAL_INPUTREADY:  .equ 1]
                    --   label: 0010 <- [49: BIT_SERIAL_OUTPUTREADY: .equ 2]
                    --   label: 0010 <- [50: REG_IOCONTOL:   .equ 0xff00]
                    --   label: 0010 <- [51: REG_IOBUFFER_1: .equ 0xff04]
                    --   label: 0010 <- [53: TEXT_AREA:        # keep current memory address before change memory address]
	7000 : 0031;    --   [0b 0000 0000 0011 0001] -> [CONST_prompt1: .asciiz "1st: ": 1]
	7001 : 0073;    --   [0b 0000 0000 0111 0011] -> [CONST_prompt1: .asciiz "1st: ": s]
	7002 : 0074;    --   [0b 0000 0000 0111 0100] -> [CONST_prompt1: .asciiz "1st: ": t]
	7003 : 003a;    --   [0b 0000 0000 0011 1010] -> [CONST_prompt1: .asciiz "1st: ": :]
	7004 : 0020;    --   [0b 0000 0000 0010 0000] -> [CONST_prompt1: .asciiz "1st: ":  ]
	7005 : 0000;    --   [0b 0000 0000 0000 0000] -> [CONST_prompt1: .asciiz "1st: ": ]
	7006 : 0032;    --   [0b 0000 0000 0011 0010] -> [CONST_prompt2: .asciiz "2nd: ": 2]
	7007 : 006e;    --   [0b 0000 0000 0110 1110] -> [CONST_prompt2: .asciiz "2nd: ": n]
	7008 : 0064;    --   [0b 0000 0000 0110 0100] -> [CONST_prompt2: .asciiz "2nd: ": d]
	7009 : 003a;    --   [0b 0000 0000 0011 1010] -> [CONST_prompt2: .asciiz "2nd: ": :]
	700a : 0020;    --   [0b 0000 0000 0010 0000] -> [CONST_prompt2: .asciiz "2nd: ":  ]
	700b : 0000;    --   [0b 0000 0000 0000 0000] -> [CONST_prompt2: .asciiz "2nd: ": ]
	700c : 0041;    --   [0b 0000 0000 0100 0001] -> [CONST_answer:  .asciiz "Ans: ": A]
	700d : 006e;    --   [0b 0000 0000 0110 1110] -> [CONST_answer:  .asciiz "Ans: ": n]
	700e : 0073;    --   [0b 0000 0000 0111 0011] -> [CONST_answer:  .asciiz "Ans: ": s]
	700f : 003a;    --   [0b 0000 0000 0011 1010] -> [CONST_answer:  .asciiz "Ans: ": :]
	7010 : 0020;    --   [0b 0000 0000 0010 0000] -> [CONST_answer:  .asciiz "Ans: ":  ]
	7011 : 0000;    --   [0b 0000 0000 0000 0000] -> [CONST_answer:  .asciiz "Ans: ": ]
	7012 : 0050;    --   [0b 0000 0000 0101 0000] -> [CONST_instr:   .asciiz "Press 'm' for Multiplier, 's' for BarrelShifter: ": P]
	7013 : 0072;    --   [0b 0000 0000 0111 0010] -> [CONST_instr:   .asciiz "Press 'm' for Multiplier, 's' for BarrelShifter: ": r]
	7014 : 0065;    --   [0b 0000 0000 0110 0101] -> [CONST_instr:   .asciiz "Press 'm' for Multiplier, 's' for BarrelShifter: ": e]
	7015 : 0073;    --   [0b 0000 0000 0111 0011] -> [CONST_instr:   .asciiz "Press 'm' for Multiplier, 's' for BarrelShifter: ": s]
	7016 : 0073;    --   [0b 0000 0000 0111 0011] -> [CONST_instr:   .asciiz "Press 'm' for Multiplier, 's' for BarrelShifter: ": s]
	7017 : 0020;    --   [0b 0000 0000 0010 0000] -> [CONST_instr:   .asciiz "Press 'm' for Multiplier, 's' for BarrelShifter: ":  ]
	7018 : 0027;    --   [0b 0000 0000 0010 0111] -> [CONST_instr:   .asciiz "Press 'm' for Multiplier, 's' for BarrelShifter: ": ']
	7019 : 006d;    --   [0b 0000 0000 0110 1101] -> [CONST_instr:   .asciiz "Press 'm' for Multiplier, 's' for BarrelShifter: ": m]
	701a : 0027;    --   [0b 0000 0000 0010 0111] -> [CONST_instr:   .asciiz "Press 'm' for Multiplier, 's' for BarrelShifter: ": ']
	701b : 0020;    --   [0b 0000 0000 0010 0000] -> [CONST_instr:   .asciiz "Press 'm' for Multiplier, 's' for BarrelShifter: ":  ]
	701c : 0066;    --   [0b 0000 0000 0110 0110] -> [CONST_instr:   .asciiz "Press 'm' for Multiplier, 's' for BarrelShifter: ": f]
	701d : 006f;    --   [0b 0000 0000 0110 1111] -> [CONST_instr:   .asciiz "Press 'm' for Multiplier, 's' for BarrelShifter: ": o]
	701e : 0072;    --   [0b 0000 0000 0111 0010] -> [CONST_instr:   .asciiz "Press 'm' for Multiplier, 's' for BarrelShifter: ": r]
	701f : 0020;    --   [0b 0000 0000 0010 0000] -> [CONST_instr:   .asciiz "Press 'm' for Multiplier, 's' for BarrelShifter: ":  ]
	7020 : 004d;    --   [0b 0000 0000 0100 1101] -> [CONST_instr:   .asciiz "Press 'm' for Multiplier, 's' for BarrelShifter: ": M]
	7021 : 0075;    --   [0b 0000 0000 0111 0101] -> [CONST_instr:   .asciiz "Press 'm' for Multiplier, 's' for BarrelShifter: ": u]
	7022 : 006c;    --   [0b 0000 0000 0110 1100] -> [CONST_instr:   .asciiz "Press 'm' for Multiplier, 's' for BarrelShifter: ": l]
	7023 : 0074;    --   [0b 0000 0000 0111 0100] -> [CONST_instr:   .asciiz "Press 'm' for Multiplier, 's' for BarrelShifter: ": t]
	7024 : 0069;    --   [0b 0000 0000 0110 1001] -> [CONST_instr:   .asciiz "Press 'm' for Multiplier, 's' for BarrelShifter: ": i]
	7025 : 0070;    --   [0b 0000 0000 0111 0000] -> [CONST_instr:   .asciiz "Press 'm' for Multiplier, 's' for BarrelShifter: ": p]
	7026 : 006c;    --   [0b 0000 0000 0110 1100] -> [CONST_instr:   .asciiz "Press 'm' for Multiplier, 's' for BarrelShifter: ": l]
	7027 : 0069;    --   [0b 0000 0000 0110 1001] -> [CONST_instr:   .asciiz "Press 'm' for Multiplier, 's' for BarrelShifter: ": i]
	7028 : 0065;    --   [0b 0000 0000 0110 0101] -> [CONST_instr:   .asciiz "Press 'm' for Multiplier, 's' for BarrelShifter: ": e]
	7029 : 0072;    --   [0b 0000 0000 0111 0010] -> [CONST_instr:   .asciiz "Press 'm' for Multiplier, 's' for BarrelShifter: ": r]
	702a : 002c;    --   [0b 0000 0000 0010 1100] -> [CONST_instr:   .asciiz "Press 'm' for Multiplier, 's' for BarrelShifter: ": ,]
	702b : 0020;    --   [0b 0000 0000 0010 0000] -> [CONST_instr:   .asciiz "Press 'm' for Multiplier, 's' for BarrelShifter: ":  ]
	702c : 0027;    --   [0b 0000 0000 0010 0111] -> [CONST_instr:   .asciiz "Press 'm' for Multiplier, 's' for BarrelShifter: ": ']
	702d : 0073;    --   [0b 0000 0000 0111 0011] -> [CONST_instr:   .asciiz "Press 'm' for Multiplier, 's' for BarrelShifter: ": s]
	702e : 0027;    --   [0b 0000 0000 0010 0111] -> [CONST_instr:   .asciiz "Press 'm' for Multiplier, 's' for BarrelShifter: ": ']
	702f : 0020;    --   [0b 0000 0000 0010 0000] -> [CONST_instr:   .asciiz "Press 'm' for Multiplier, 's' for BarrelShifter: ":  ]
	7030 : 0066;    --   [0b 0000 0000 0110 0110] -> [CONST_instr:   .asciiz "Press 'm' for Multiplier, 's' for BarrelShifter: ": f]
	7031 : 006f;    --   [0b 0000 0000 0110 1111] -> [CONST_instr:   .asciiz "Press 'm' for Multiplier, 's' for BarrelShifter: ": o]
	7032 : 0072;    --   [0b 0000 0000 0111 0010] -> [CONST_instr:   .asciiz "Press 'm' for Multiplier, 's' for BarrelShifter: ": r]
	7033 : 0020;    --   [0b 0000 0000 0010 0000] -> [CONST_instr:   .asciiz "Press 'm' for Multiplier, 's' for BarrelShifter: ":  ]
	7034 : 0042;    --   [0b 0000 0000 0100 0010] -> [CONST_instr:   .asciiz "Press 'm' for Multiplier, 's' for BarrelShifter: ": B]
	7035 : 0061;    --   [0b 0000 0000 0110 0001] -> [CONST_instr:   .asciiz "Press 'm' for Multiplier, 's' for BarrelShifter: ": a]
	7036 : 0072;    --   [0b 0000 0000 0111 0010] -> [CONST_instr:   .asciiz "Press 'm' for Multiplier, 's' for BarrelShifter: ": r]
	7037 : 0072;    --   [0b 0000 0000 0111 0010] -> [CONST_instr:   .asciiz "Press 'm' for Multiplier, 's' for BarrelShifter: ": r]
	7038 : 0065;    --   [0b 0000 0000 0110 0101] -> [CONST_instr:   .asciiz "Press 'm' for Multiplier, 's' for BarrelShifter: ": e]
	7039 : 006c;    --   [0b 0000 0000 0110 1100] -> [CONST_instr:   .asciiz "Press 'm' for Multiplier, 's' for BarrelShifter: ": l]
	703a : 0053;    --   [0b 0000 0000 0101 0011] -> [CONST_instr:   .asciiz "Press 'm' for Multiplier, 's' for BarrelShifter: ": S]
	703b : 0068;    --   [0b 0000 0000 0110 1000] -> [CONST_instr:   .asciiz "Press 'm' for Multiplier, 's' for BarrelShifter: ": h]
	703c : 0069;    --   [0b 0000 0000 0110 1001] -> [CONST_instr:   .asciiz "Press 'm' for Multiplier, 's' for BarrelShifter: ": i]
	703d : 0066;    --   [0b 0000 0000 0110 0110] -> [CONST_instr:   .asciiz "Press 'm' for Multiplier, 's' for BarrelShifter: ": f]
	703e : 0074;    --   [0b 0000 0000 0111 0100] -> [CONST_instr:   .asciiz "Press 'm' for Multiplier, 's' for BarrelShifter: ": t]
	703f : 0065;    --   [0b 0000 0000 0110 0101] -> [CONST_instr:   .asciiz "Press 'm' for Multiplier, 's' for BarrelShifter: ": e]
	7040 : 0072;    --   [0b 0000 0000 0111 0010] -> [CONST_instr:   .asciiz "Press 'm' for Multiplier, 's' for BarrelShifter: ": r]
	7041 : 003a;    --   [0b 0000 0000 0011 1010] -> [CONST_instr:   .asciiz "Press 'm' for Multiplier, 's' for BarrelShifter: ": :]
	7042 : 0020;    --   [0b 0000 0000 0010 0000] -> [CONST_instr:   .asciiz "Press 'm' for Multiplier, 's' for BarrelShifter: ":  ]
	7043 : 0000;    --   [0b 0000 0000 0000 0000] -> [CONST_instr:   .asciiz "Press 'm' for Multiplier, 's' for BarrelShifter: ": ]
	7044 : 003d;    --   [0b 0000 0000 0011 1101] -> [CONST_mult:    .asciiz "= Multiplier =": =]
	7045 : 0020;    --   [0b 0000 0000 0010 0000] -> [CONST_mult:    .asciiz "= Multiplier =":  ]
	7046 : 004d;    --   [0b 0000 0000 0100 1101] -> [CONST_mult:    .asciiz "= Multiplier =": M]
	7047 : 0075;    --   [0b 0000 0000 0111 0101] -> [CONST_mult:    .asciiz "= Multiplier =": u]
	7048 : 006c;    --   [0b 0000 0000 0110 1100] -> [CONST_mult:    .asciiz "= Multiplier =": l]
	7049 : 0074;    --   [0b 0000 0000 0111 0100] -> [CONST_mult:    .asciiz "= Multiplier =": t]
	704a : 0069;    --   [0b 0000 0000 0110 1001] -> [CONST_mult:    .asciiz "= Multiplier =": i]
	704b : 0070;    --   [0b 0000 0000 0111 0000] -> [CONST_mult:    .asciiz "= Multiplier =": p]
	704c : 006c;    --   [0b 0000 0000 0110 1100] -> [CONST_mult:    .asciiz "= Multiplier =": l]
	704d : 0069;    --   [0b 0000 0000 0110 1001] -> [CONST_mult:    .asciiz "= Multiplier =": i]
	704e : 0065;    --   [0b 0000 0000 0110 0101] -> [CONST_mult:    .asciiz "= Multiplier =": e]
	704f : 0072;    --   [0b 0000 0000 0111 0010] -> [CONST_mult:    .asciiz "= Multiplier =": r]
	7050 : 0020;    --   [0b 0000 0000 0010 0000] -> [CONST_mult:    .asciiz "= Multiplier =":  ]
	7051 : 003d;    --   [0b 0000 0000 0011 1101] -> [CONST_mult:    .asciiz "= Multiplier =": =]
	7052 : 0000;    --   [0b 0000 0000 0000 0000] -> [CONST_mult:    .asciiz "= Multiplier =": ]
	7053 : 003d;    --   [0b 0000 0000 0011 1101] -> [CONST_shift:   .asciiz "= Barrel Shifter =": =]
	7054 : 0020;    --   [0b 0000 0000 0010 0000] -> [CONST_shift:   .asciiz "= Barrel Shifter =":  ]
	7055 : 0042;    --   [0b 0000 0000 0100 0010] -> [CONST_shift:   .asciiz "= Barrel Shifter =": B]
	7056 : 0061;    --   [0b 0000 0000 0110 0001] -> [CONST_shift:   .asciiz "= Barrel Shifter =": a]
	7057 : 0072;    --   [0b 0000 0000 0111 0010] -> [CONST_shift:   .asciiz "= Barrel Shifter =": r]
	7058 : 0072;    --   [0b 0000 0000 0111 0010] -> [CONST_shift:   .asciiz "= Barrel Shifter =": r]
	7059 : 0065;    --   [0b 0000 0000 0110 0101] -> [CONST_shift:   .asciiz "= Barrel Shifter =": e]
	705a : 006c;    --   [0b 0000 0000 0110 1100] -> [CONST_shift:   .asciiz "= Barrel Shifter =": l]
	705b : 0020;    --   [0b 0000 0000 0010 0000] -> [CONST_shift:   .asciiz "= Barrel Shifter =":  ]
	705c : 0053;    --   [0b 0000 0000 0101 0011] -> [CONST_shift:   .asciiz "= Barrel Shifter =": S]
	705d : 0068;    --   [0b 0000 0000 0110 1000] -> [CONST_shift:   .asciiz "= Barrel Shifter =": h]
	705e : 0069;    --   [0b 0000 0000 0110 1001] -> [CONST_shift:   .asciiz "= Barrel Shifter =": i]
	705f : 0066;    --   [0b 0000 0000 0110 0110] -> [CONST_shift:   .asciiz "= Barrel Shifter =": f]
	7060 : 0074;    --   [0b 0000 0000 0111 0100] -> [CONST_shift:   .asciiz "= Barrel Shifter =": t]
	7061 : 0065;    --   [0b 0000 0000 0110 0101] -> [CONST_shift:   .asciiz "= Barrel Shifter =": e]
	7062 : 0072;    --   [0b 0000 0000 0111 0010] -> [CONST_shift:   .asciiz "= Barrel Shifter =": r]
	7063 : 0020;    --   [0b 0000 0000 0010 0000] -> [CONST_shift:   .asciiz "= Barrel Shifter =":  ]
	7064 : 003d;    --   [0b 0000 0000 0011 1101] -> [CONST_shift:   .asciiz "= Barrel Shifter =": =]
	7065 : 0000;    --   [0b 0000 0000 0000 0000] -> [CONST_shift:   .asciiz "= Barrel Shifter =": ]
                    --   auto-gen (0x6f6 > 10bits) <- [66: J    DEMO]
	0010 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	0011 : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	0012 : 66c1;    --   [0b 0110 0110 1100 0001] -> [asm:  (I):  ORI 	$t1, 0x1]
	0013 : 72ca;    --   [0b 0111 0010 1100 1010] -> [asm:  (I):  SLLI 	$t1, 0xa]
	0014 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	0015 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	0016 : 66cb;    --   [0b 0110 0110 1100 1011] -> [asm:  (I):  ORI 	$t1, 0xb]
	0017 : 72c6;    --   [0b 0111 0010 1100 0110] -> [asm:  (I):  SLLI 	$t1, 0x6]
	0018 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	0019 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	001a : 66f6;    --   [0b 0110 0110 1111 0110] -> [asm:  (I):  ORI 	$t1, 0x36]
	001b : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	001c : a850;    --   [0b 1010 1000 0101 0000] -> [asm: (R1):  JR 	$at]

                    --   label: 001d <- [152: putchar: ]
	001d : 40ba;    --   [0b 0100 0000 1011 1010] -> [153: ADDI $sp, -6       # 6 byte]
	001e : c942;    --   [0b 1100 1001 0100 0010] -> [154: SW   $sp, $ra, 2]
	001f : 6040;    --   [0b 0110 0000 0100 0000] -> [155: ANDI $at, 0]
	0020 : 2460;    --   [0b 0010 0100 0110 0000] -> [156: OR   $at, $s0]
	0021 : c911;    --   [0b 1100 1001 0001 0001] -> [157: SW   $sp, $at, 1]
	0022 : 6040;    --   [0b 0110 0000 0100 0000] -> [158: ANDI $at, 0]
	0023 : 2464;    --   [0b 0010 0100 0110 0100] -> [159: OR   $at, $s1]
	0024 : c910;    --   [0b 1100 1001 0001 0000] -> [160: SW   $sp, $at, 0]
	0025 : 6100;    --   [0b 0110 0001 0000 0000] -> [162: ANDI $ra, 0        # $ra = 0]
	0026 : 6140;    --   [0b 0110 0001 0100 0000] -> [163: ANDI $rb, 0        # $rb = 0]
	0027 : 6180;    --   [0b 0110 0001 1000 0000] -> [164: ANDI $rc, 0        # $rc = 0]
	0028 : 61c0;    --   [0b 0110 0001 1100 0000] -> [165: ANDI $rd, 0        # $rd = 0]
	0029 : 6502;    --   [0b 0110 0101 0000 0010] -> [167: ORI  $ra, BIT_SERIAL_OUTPUTREADY]
                    --   auto-gen (0xff00 > 5bits) <- [168: ORI  $rb, REG_IOCONTOL     ]
	002a : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	002b : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	002c : 66ff;    --   [0b 0110 0110 1111 1111] -> [asm:  (I):  ORI 	$t1, 0x3f]
	002d : 72ca;    --   [0b 0111 0010 1100 1010] -> [asm:  (I):  SLLI 	$t1, 0xa]
	002e : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	002f : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	0030 : 66cc;    --   [0b 0110 0110 1100 1100] -> [asm:  (I):  ORI 	$t1, 0xc]
	0031 : 72c6;    --   [0b 0111 0010 1100 0110] -> [asm:  (I):  SLLI 	$t1, 0x6]
	0032 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	0033 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	0034 : 66c0;    --   [0b 0110 0110 1100 0000] -> [asm:  (I):  ORI 	$t1, 0x0]
	0035 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	0036 : 2544;    --   [0b 0010 0101 0100 0100] -> [asm: (R2):  OR 	$rb, $at]

                    --   auto-gen (0xff04 > 5bits) <- [169: ORI  $rc, REG_IOBUFFER_1   ]
	0037 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	0038 : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	0039 : 66ff;    --   [0b 0110 0110 1111 1111] -> [asm:  (I):  ORI 	$t1, 0x3f]
	003a : 72ca;    --   [0b 0111 0010 1100 1010] -> [asm:  (I):  SLLI 	$t1, 0xa]
	003b : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	003c : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	003d : 66cc;    --   [0b 0110 0110 1100 1100] -> [asm:  (I):  ORI 	$t1, 0xc]
	003e : 72c6;    --   [0b 0111 0010 1100 0110] -> [asm:  (I):  SLLI 	$t1, 0x6]
	003f : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	0040 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	0041 : 66c4;    --   [0b 0110 0110 1100 0100] -> [asm:  (I):  ORI 	$t1, 0x4]
	0042 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	0043 : 2584;    --   [0b 0010 0101 1000 0100] -> [asm: (R2):  OR 	$rc, $at]

	0044 : 25e8;    --   [0b 0010 0101 1110 1000] -> [170: OR   $rd, $t0      # $rd = character]
	0045 : c4d0;    --   [0b 1100 0100 1101 0000] -> [172: LB   $at, $rb, 0   # $at = $($rb)]
	0046 : 2050;    --   [0b 0010 0000 0101 0000] -> [173: AND  $at, $ra      # $at & ra to check if ready to write]
	0047 : b4ce;    --   [0b 1011 0100 1100 1110] -> [174: BNE  $at, $ra, -2  # go back -2 words if $at != $ra]
	0048 : cf70;    --   [0b 1100 1111 0111 0000] -> [175: SB   $rc, $rd, 0   # $($rc + 0) = $rd for one byte]
	0049 : c0a0;    --   [0b 1100 0000 1010 0000] -> [177: LW   $at, $sp, 0]
	004a : 6240;    --   [0b 0110 0010 0100 0000] -> [178: ANDI $s1, 0]
	004b : 2644;    --   [0b 0010 0110 0100 0100] -> [179: OR   $s1, $at]
	004c : c0a1;    --   [0b 1100 0000 1010 0001] -> [180: LW   $at, $sp, 1]
	004d : 6200;    --   [0b 0110 0010 0000 0000] -> [181: ANDI $s0, 0]
	004e : 2604;    --   [0b 0010 0110 0000 0100] -> [182: OR   $s0, $at]
	004f : c222;    --   [0b 1100 0010 0010 0010] -> [183: LW   $ra, $sp, 2   # restore $ra and return]
	0050 : 4086;    --   [0b 0100 0000 1000 0110] -> [184: ADDI $sp, 6]
	0051 : a900;    --   [0b 1010 1001 0000 0000] -> [185: JR   $ra]
                    --   label: 0052 <- [196: getchar:]
	0052 : 40bc;    --   [0b 0100 0000 1011 1100] -> [197: ADDI $sp, -4       # 4 byte]
	0053 : c941;    --   [0b 1100 1001 0100 0001] -> [198: SW   $sp, $ra, 1]
	0054 : 6040;    --   [0b 0110 0000 0100 0000] -> [199: ANDI $at, 0]
	0055 : 2460;    --   [0b 0010 0100 0110 0000] -> [200: OR   $at, $s0]
	0056 : c910;    --   [0b 1100 1001 0001 0000] -> [201: SW   $sp, $at, 0]
	0057 : 6100;    --   [0b 0110 0001 0000 0000] -> [203: ANDI $ra, 0        # $ra = 0]
	0058 : 6140;    --   [0b 0110 0001 0100 0000] -> [204: ANDI $rb, 0        # $rb = 0]
	0059 : 6180;    --   [0b 0110 0001 1000 0000] -> [205: ANDI $rc, 0        # $rc = 0]
	005a : 61c0;    --   [0b 0110 0001 1100 0000] -> [206: ANDI $rd, 0        # $rd = 0]
	005b : 6501;    --   [0b 0110 0101 0000 0001] -> [208: ORI  $ra, BIT_SERIAL_INPUTREADY ]
                    --   auto-gen (0xff00 > 5bits) <- [209: ORI  $rb, REG_IOCONTOL     	]
	005c : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	005d : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	005e : 66ff;    --   [0b 0110 0110 1111 1111] -> [asm:  (I):  ORI 	$t1, 0x3f]
	005f : 72ca;    --   [0b 0111 0010 1100 1010] -> [asm:  (I):  SLLI 	$t1, 0xa]
	0060 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	0061 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	0062 : 66cc;    --   [0b 0110 0110 1100 1100] -> [asm:  (I):  ORI 	$t1, 0xc]
	0063 : 72c6;    --   [0b 0111 0010 1100 0110] -> [asm:  (I):  SLLI 	$t1, 0x6]
	0064 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	0065 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	0066 : 66c0;    --   [0b 0110 0110 1100 0000] -> [asm:  (I):  ORI 	$t1, 0x0]
	0067 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	0068 : 2544;    --   [0b 0010 0101 0100 0100] -> [asm: (R2):  OR 	$rb, $at]

                    --   auto-gen (0xff04 > 5bits) <- [210: ORI  $rc, REG_IOBUFFER_1   	]
	0069 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	006a : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	006b : 66ff;    --   [0b 0110 0110 1111 1111] -> [asm:  (I):  ORI 	$t1, 0x3f]
	006c : 72ca;    --   [0b 0111 0010 1100 1010] -> [asm:  (I):  SLLI 	$t1, 0xa]
	006d : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	006e : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	006f : 66cc;    --   [0b 0110 0110 1100 1100] -> [asm:  (I):  ORI 	$t1, 0xc]
	0070 : 72c6;    --   [0b 0111 0010 1100 0110] -> [asm:  (I):  SLLI 	$t1, 0x6]
	0071 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	0072 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	0073 : 66c4;    --   [0b 0110 0110 1100 0100] -> [asm:  (I):  ORI 	$t1, 0x4]
	0074 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	0075 : 2584;    --   [0b 0010 0101 1000 0100] -> [asm: (R2):  OR 	$rc, $at]

	0076 : c4d0;    --   [0b 1100 0100 1101 0000] -> [212: LB   $at, $rb, 0   # $at = $($rb)]
	0077 : 2050;    --   [0b 0010 0000 0101 0000] -> [213: AND  $at, $ra      # $at & ra to check if ready to write]
	0078 : b4ce;    --   [0b 1011 0100 1100 1110] -> [214: BNE  $at, $ra, -2  # go back -2 words if $at != $ra]
	0079 : c7e0;    --   [0b 1100 0111 1110 0000] -> [215: LB   $rd, $rc, 0   # $rd = $($rc + 0) for one character byte]
	007a : 6280;    --   [0b 0110 0010 1000 0000] -> [216: ANDI $t0, 0]
	007b : 269c;    --   [0b 0010 0110 1001 1100] -> [217: OR   $t0, $rd      # store char to return register]
	007c : c0a0;    --   [0b 1100 0000 1010 0000] -> [219: LW   $at, $sp, 0]
	007d : 6200;    --   [0b 0110 0010 0000 0000] -> [220: ANDI $s0, 0]
	007e : 2604;    --   [0b 0010 0110 0000 0100] -> [221: OR   $s0, $at]
	007f : c221;    --   [0b 1100 0010 0010 0001] -> [222: LW   $ra, $sp, 1   # restore $ra and return]
	0080 : 4084;    --   [0b 0100 0000 1000 0100] -> [223: ADDI $sp, 4]
	0081 : a900;    --   [0b 1010 1001 0000 0000] -> [224: JR   $ra]
                    --   label: 0082 <- [234: putString:]
	0082 : 40bc;    --   [0b 0100 0000 1011 1100] -> [235: ADDI $sp, -4       # 4 byte]
	0083 : c941;    --   [0b 1100 1001 0100 0001] -> [236: SW   $sp, $ra, 1]
	0084 : 6040;    --   [0b 0110 0000 0100 0000] -> [237: ANDI $at, 0]
	0085 : 2460;    --   [0b 0010 0100 0110 0000] -> [238: OR   $at, $s0]
	0086 : c910;    --   [0b 1100 1001 0001 0000] -> [239: SW   $sp, $at, 0]
	0087 : 6200;    --   [0b 0110 0010 0000 0000] -> [241: ANDI $s0, 0        # $s0 = 0]
	0088 : 2628;    --   [0b 0010 0110 0010 1000] -> [242: OR   $s0, $t0      # string counter]
                    --   label: 0089 <- [244: putcharloop:]
	0089 : 6040;    --   [0b 0110 0000 0100 0000] -> [245: ANDI $at, 0]
	008a : 2460;    --   [0b 0010 0100 0110 0000] -> [246: OR   $at, $s0      # prepare for load]
	008b : 61c0;    --   [0b 0110 0001 1100 0000] -> [247: ANDI $rd, 0        # $rd = 0]
	008c : c790;    --   [0b 1100 0111 1001 0000] -> [248: LB   $rd, $at, 0   # prepare a byte from in-memory]
	008d : 6280;    --   [0b 0110 0010 1000 0000] -> [249: ANDI $t0, 0]
	008e : 269c;    --   [0b 0010 0110 1001 1100] -> [250: OR   $t0, $rd      # set argument]
	008f : b386;    --   [0b 1011 0011 1000 0110] -> [251: BEQ  $rd, $r0, 6   # branch if null character read]
	0090 : a43a;    --   [0b 1010 0100 0011 1010] -> [252: JAL  putchar]
	0091 : 4202;    --   [0b 0100 0010 0000 0010] -> [254: ADDI $s0, 2        # next char]
	0092 : a112;    --   [0b 1010 0001 0001 0010] -> [255: J    putcharloop   # load again]
	0093 : 6280;    --   [0b 0110 0010 1000 0000] -> [256: ANDI $t0, 0        # put null char at the end]
	0094 : a43a;    --   [0b 1010 0100 0011 1010] -> [257: JAL  putchar]
	0095 : c0a0;    --   [0b 1100 0000 1010 0000] -> [259: LW   $at, $sp, 0]
	0096 : 6200;    --   [0b 0110 0010 0000 0000] -> [260: ANDI $s0, 0]
	0097 : 2604;    --   [0b 0010 0110 0000 0100] -> [261: OR   $s0, $at]
	0098 : c221;    --   [0b 1100 0010 0010 0001] -> [262: LW   $ra, $sp, 1   # restore $ra and return]
	0099 : 4084;    --   [0b 0100 0000 1000 0100] -> [263: ADDI $sp, 4]
	009a : a900;    --   [0b 1010 1001 0000 0000] -> [264: JR   $ra]
                    --   label: 009b <- [276: getString:]
	009b : 40bc;    --   [0b 0100 0000 1011 1100] -> [277: ADDI $sp, -4       # 4 byte]
	009c : c941;    --   [0b 1100 1001 0100 0001] -> [278: SW   $sp, $ra, 1]
	009d : 6040;    --   [0b 0110 0000 0100 0000] -> [279: ANDI $at, 0]
	009e : 2460;    --   [0b 0010 0100 0110 0000] -> [280: OR   $at, $s0]
	009f : c910;    --   [0b 1100 1001 0001 0000] -> [281: SW   $sp, $at, 0]
	00a0 : 6100;    --   [0b 0110 0001 0000 0000] -> [283: ANDI $ra, 0]
	00a1 : 6501;    --   [0b 0110 0101 0000 0001] -> [284: ORI  $ra, BIT_SERIAL_INPUTREADY]
	00a2 : 6140;    --   [0b 0110 0001 0100 0000] -> [285: ANDI $rb, 0]
                    --   auto-gen (0xff00 > 5bits) <- [286: ORI  $rb, REG_IOCONTOL]
	00a3 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	00a4 : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	00a5 : 66ff;    --   [0b 0110 0110 1111 1111] -> [asm:  (I):  ORI 	$t1, 0x3f]
	00a6 : 72ca;    --   [0b 0111 0010 1100 1010] -> [asm:  (I):  SLLI 	$t1, 0xa]
	00a7 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	00a8 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	00a9 : 66cc;    --   [0b 0110 0110 1100 1100] -> [asm:  (I):  ORI 	$t1, 0xc]
	00aa : 72c6;    --   [0b 0111 0010 1100 0110] -> [asm:  (I):  SLLI 	$t1, 0x6]
	00ab : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	00ac : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	00ad : 66c0;    --   [0b 0110 0110 1100 0000] -> [asm:  (I):  ORI 	$t1, 0x0]
	00ae : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	00af : 2544;    --   [0b 0010 0101 0100 0100] -> [asm: (R2):  OR 	$rb, $at]

	00b0 : cec0;    --   [0b 1100 1110 1100 0000] -> [287: SB   $rb, $ra, 0   # Flush the serial port input queue to get ready for input]
	00b1 : 6200;    --   [0b 0110 0010 0000 0000] -> [289: ANDI $s0, 0        # $s0 = 0]
	00b2 : 2628;    --   [0b 0010 0110 0010 1000] -> [290: OR   $s0, $t0      # $s0 is address of char for string]
                    --   label: 00b3 <- [292: getcharloop:]
	00b3 : a4a4;    --   [0b 1010 0100 1010 0100] -> [293: JAL  getchar]
	00b4 : 61c0;    --   [0b 0110 0001 1100 0000] -> [294: ANDI $rd, 0]
	00b5 : 25e8;    --   [0b 0010 0101 1110 1000] -> [295: OR   $rd, $t0      # copy getchar result $t0]
	00b6 : 6180;    --   [0b 0110 0001 1000 0000] -> [296: ANDI $rc, 0]
	00b7 : 25a0;    --   [0b 0010 0101 1010 0000] -> [297: OR   $rc, $s0      ]
	00b8 : cf70;    --   [0b 1100 1111 0111 0000] -> [298: SB   $rc, $rd, 0   # store one byte in $rd]
	00b9 : 4202;    --   [0b 0100 0010 0000 0010] -> [300: ADDI $s0, 2        # next char is 2 bytes away, because only lower word is used]
	00ba : 6040;    --   [0b 0110 0000 0100 0000] -> [301: ANDI $at, 0]
	00bb : 644a;    --   [0b 0110 0100 0100 1010] -> [302: ORI  $at, '\n']
	00bc : b392;    --   [0b 1011 0011 1001 0010] -> [303: BEQ  $rd, $at, 2   # branch if '\n' character read]
	00bd : a166;    --   [0b 1010 0001 0110 0110] -> [304: J    getcharloop   # read again]
	00be : 6180;    --   [0b 0110 0001 1000 0000] -> [305: ANDI $rc, 0]
	00bf : 25a0;    --   [0b 0010 0101 1010 0000] -> [306: OR   $rc, $s0      ]
	00c0 : cf00;    --   [0b 1100 1111 0000 0000] -> [307: SB   $rc, $r0, 0   # put null char to terminate]
	00c1 : 6100;    --   [0b 0110 0001 0000 0000] -> [309: ANDI $ra, 0]
	00c2 : 6501;    --   [0b 0110 0101 0000 0001] -> [310: ORI  $ra, BIT_SERIAL_INPUTREADY]
	00c3 : 6502;    --   [0b 0110 0101 0000 0010] -> [311: ORI  $ra, BIT_SERIAL_OUTPUTREADY]
	00c4 : 6140;    --   [0b 0110 0001 0100 0000] -> [312: ANDI $rb, 0]
                    --   auto-gen (0xff00 > 5bits) <- [313: ORI  $rb, REG_IOCONTOL]
	00c5 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	00c6 : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	00c7 : 66ff;    --   [0b 0110 0110 1111 1111] -> [asm:  (I):  ORI 	$t1, 0x3f]
	00c8 : 72ca;    --   [0b 0111 0010 1100 1010] -> [asm:  (I):  SLLI 	$t1, 0xa]
	00c9 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	00ca : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	00cb : 66cc;    --   [0b 0110 0110 1100 1100] -> [asm:  (I):  ORI 	$t1, 0xc]
	00cc : 72c6;    --   [0b 0111 0010 1100 0110] -> [asm:  (I):  SLLI 	$t1, 0x6]
	00cd : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	00ce : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	00cf : 66c0;    --   [0b 0110 0110 1100 0000] -> [asm:  (I):  ORI 	$t1, 0x0]
	00d0 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	00d1 : 2544;    --   [0b 0010 0101 0100 0100] -> [asm: (R2):  OR 	$rb, $at]

	00d2 : cec0;    --   [0b 1100 1110 1100 0000] -> [314: SB   $rb, $ra, 0   # Flush the serial port input queue to get ready for input]
	00d3 : c0a0;    --   [0b 1100 0000 1010 0000] -> [316: LW   $at, $sp, 0]
	00d4 : 6200;    --   [0b 0110 0010 0000 0000] -> [317: ANDI $s0, 0]
	00d5 : 2604;    --   [0b 0010 0110 0000 0100] -> [318: OR   $s0, $at]
	00d6 : c221;    --   [0b 1100 0010 0010 0001] -> [319: LW   $ra, $sp, 1   # restore $ra and return]
	00d7 : 4084;    --   [0b 0100 0000 1000 0100] -> [320: ADDI $sp, 4]
	00d8 : a900;    --   [0b 1010 1001 0000 0000] -> [321: JR   $ra]
                    --   label: 00d9 <- [335: intToString:]
	00d9 : 40be;    --   [0b 0100 0000 1011 1110] -> [336: ADDI  $sp, -2]
	00da : c940;    --   [0b 1100 1001 0100 0000] -> [337: SW    $sp, $ra, 0   # save return address ]
	00db : 6140;    --   [0b 0110 0001 0100 0000] -> [339: ANDI  $rb, 0       # $rb is output value]
	00dc : 6200;    --   [0b 0110 0010 0000 0000] -> [340: ANDI  $s0, 0       # $s0 is data to be processed]
	00dd : 2628;    --   [0b 0010 0110 0010 1000] -> [341: OR    $s0, $t0]
	00de : 6240;    --   [0b 0110 0010 0100 0000] -> [342: ANDI  $s1, 0       # $s1 is FSM to keep number char is seen]
	00df : 6100;    --   [0b 0110 0001 0000 0000] -> [345: ANDI  $ra, 0]
	00e0 : 2520;    --   [0b 0010 0101 0010 0000] -> [346: OR    $ra, $s0]
                    --   auto-gen (0x8000 > 5bits) <- [347: ANDI  $ra, 0x8000   # check if negative]
	00e1 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	00e2 : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	00e3 : 66e0;    --   [0b 0110 0110 1110 0000] -> [asm:  (I):  ORI 	$t1, 0x20]
	00e4 : 72ca;    --   [0b 0111 0010 1100 1010] -> [asm:  (I):  SLLI 	$t1, 0xa]
	00e5 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	00e6 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	00e7 : 66c0;    --   [0b 0110 0110 1100 0000] -> [asm:  (I):  ORI 	$t1, 0x0]
	00e8 : 72c6;    --   [0b 0111 0010 1100 0110] -> [asm:  (I):  SLLI 	$t1, 0x6]
	00e9 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	00ea : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	00eb : 66c0;    --   [0b 0110 0110 1100 0000] -> [asm:  (I):  ORI 	$t1, 0x0]
	00ec : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	00ed : 2104;    --   [0b 0010 0001 0000 0100] -> [asm: (R2):  AND 	$ra, $at]

	00ee : b602;    --   [0b 1011 0110 0000 0010] -> [348: BNE   $ra, $r0, 2   # go to negative process]
	00ef : a25a;    --   [0b 1010 0010 0101 1010] -> [349: J     digit5]
                    --   auto-gen (0xffff > 5bits) <- [351: XORI  $s0, 0xffff   # flip bits]
	00f0 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	00f1 : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	00f2 : 66ff;    --   [0b 0110 0110 1111 1111] -> [asm:  (I):  ORI 	$t1, 0x3f]
	00f3 : 72ca;    --   [0b 0111 0010 1100 1010] -> [asm:  (I):  SLLI 	$t1, 0xa]
	00f4 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	00f5 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	00f6 : 66cf;    --   [0b 0110 0110 1100 1111] -> [asm:  (I):  ORI 	$t1, 0xf]
	00f7 : 72c6;    --   [0b 0111 0010 1100 0110] -> [asm:  (I):  SLLI 	$t1, 0x6]
	00f8 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	00f9 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	00fa : 66ff;    --   [0b 0110 0110 1111 1111] -> [asm:  (I):  ORI 	$t1, 0x3f]
	00fb : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	00fc : 2a04;    --   [0b 0010 1010 0000 0100] -> [asm: (R2):  XOR 	$s0, $at]

	00fd : 4201;    --   [0b 0100 0010 0000 0001] -> [352: ADDI  $s0, 1        # +1 to negate initial data]
	00fe : 6280;    --   [0b 0110 0010 1000 0000] -> [353: ANDI  $t0, 0]
	00ff : 66ad;    --   [0b 0110 0110 1010 1101] -> [354: ORI   $t0, '-'      # set argument for putchar]
	0100 : a43a;    --   [0b 1010 0100 0011 1010] -> [355: JAL   putchar       # put '-']
	0101 : a25a;    --   [0b 1010 0010 0101 1010] -> [356: J     digit5        # start looping for digit counts]
                    --   label: 0102 <- [358: digitloop:          # process $rb = $s0/$rc, $s0 = $s0 % $rc]
	0102 : 6040;    --   [0b 0110 0000 0100 0000] -> [359: ANDI  $at, 0    ]
	0103 : 2460;    --   [0b 0010 0100 0110 0000] -> [360: OR    $at, $s0      # $at is copy of $s0 to test]
	0104 : 0458;    --   [0b 0000 0100 0101 1000] -> [361: SUB   $at, $rc]
	0105 : 0c40;    --   [0b 0000 1100 0100 0000] -> [362: SLT   $at, $r0      # test if data < divisor]
	0106 : b484;    --   [0b 1011 0100 1000 0100] -> [363: BNE   $at, $r0, 4   # go to next if data < divisor]
	0107 : 0618;    --   [0b 0000 0110 0001 1000] -> [364: SUB   $s0, $rc]
	0108 : 4141;    --   [0b 0100 0001 0100 0001] -> [365: ADDI  $rb, 1]
	0109 : a204;    --   [0b 1010 0010 0000 0100] -> [366: J     digitloop]
                    --   label: 010a <- [368: int_to_char:        # putchar($rb + '0') ]
                    --   auto-gen (0x30 > 5bits) <- [369: ADDI  $rb, '0']
	010a : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	010b : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	010c : 66c0;    --   [0b 0110 0110 1100 0000] -> [asm:  (I):  ORI 	$t1, 0x0]
	010d : 72ca;    --   [0b 0111 0010 1100 1010] -> [asm:  (I):  SLLI 	$t1, 0xa]
	010e : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	010f : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	0110 : 66c0;    --   [0b 0110 0110 1100 0000] -> [asm:  (I):  ORI 	$t1, 0x0]
	0111 : 72c6;    --   [0b 0111 0010 1100 0110] -> [asm:  (I):  SLLI 	$t1, 0x6]
	0112 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	0113 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	0114 : 66f0;    --   [0b 0110 0110 1111 0000] -> [asm:  (I):  ORI 	$t1, 0x30]
	0115 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	0116 : 0144;    --   [0b 0000 0001 0100 0100] -> [asm: (R2):  ADD 	$rb, $at]

	0117 : 6280;    --   [0b 0110 0010 1000 0000] -> [370: ANDI  $t0, 0]
	0118 : 2694;    --   [0b 0010 0110 1001 0100] -> [371: OR    $t0, $rb]
	0119 : 6140;    --   [0b 0110 0001 0100 0000] -> [372: ANDI  $rb, 0        # reset to zero ]
	011a : 6641;    --   [0b 0110 0110 0100 0001] -> [373: ORI   $s1, 1        # FSM to keep char is written]
	011b : 40be;    --   [0b 0100 0000 1011 1110] -> [374: ADDI  $sp, -2       # store current $ra to $sp before JAL]
	011c : c940;    --   [0b 1100 1001 0100 0000] -> [375: SW    $sp, $ra, 0]
	011d : a43a;    --   [0b 1010 0100 0011 1010] -> [376: JAL   putchar]
	011e : c220;    --   [0b 1100 0010 0010 0000] -> [377: LW    $ra, $sp, 0]
	011f : 4082;    --   [0b 0100 0000 1000 0010] -> [378: ADDI  $sp, 2]
	0120 : a900;    --   [0b 1010 1001 0000 0000] -> [379: JR    $ra]
                    --   label: 0121 <- [381: zeroHandler:       # put '0' when $s1 is zero]
	0121 : 6040;    --   [0b 0110 0000 0100 0000] -> [382: ANDI  $at, 0]
	0122 : 2464;    --   [0b 0010 0100 0110 0100] -> [383: OR    $at, $s1]
	0123 : b482;    --   [0b 1011 0100 1000 0010] -> [384: BNE   $at, $r0, 2  # BNE 0 means $s1 = 1 where number char is seen, so need to put '0']
	0124 : a900;    --   [0b 1010 1001 0000 0000] -> [385: JR    $ra]
	0125 : 6280;    --   [0b 0110 0010 1000 0000] -> [386: ANDI  $t0, 0]
	0126 : 66b0;    --   [0b 0110 0110 1011 0000] -> [387: ORI   $t0, '0']
	0127 : 40be;    --   [0b 0100 0000 1011 1110] -> [388: ADDI  $sp, -2      # store current $ra to $sp before JAL]
	0128 : c940;    --   [0b 1100 1001 0100 0000] -> [389: SW    $sp, $ra, 0]
	0129 : a43a;    --   [0b 1010 0100 0011 1010] -> [390: JAL   putchar]
	012a : c220;    --   [0b 1100 0010 0010 0000] -> [391: LW    $ra, $sp, 0]
	012b : 4082;    --   [0b 0100 0000 1000 0010] -> [392: ADDI  $sp, 2]
	012c : a900;    --   [0b 1010 1001 0000 0000] -> [393: JR    $ra]
                    --   label: 012d <- [395: digit5:]
	012d : 6180;    --   [0b 0110 0001 1000 0000] -> [396: ANDI  $rc, 0]
                    --   auto-gen (0x2710 > 5bits) <- [397: ORI   $rc, 10000   # $rc is divisor]
	012e : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	012f : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	0130 : 66c9;    --   [0b 0110 0110 1100 1001] -> [asm:  (I):  ORI 	$t1, 0x9]
	0131 : 72ca;    --   [0b 0111 0010 1100 1010] -> [asm:  (I):  SLLI 	$t1, 0xa]
	0132 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	0133 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	0134 : 66cc;    --   [0b 0110 0110 1100 1100] -> [asm:  (I):  ORI 	$t1, 0xc]
	0135 : 72c6;    --   [0b 0111 0010 1100 0110] -> [asm:  (I):  SLLI 	$t1, 0x6]
	0136 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	0137 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	0138 : 66d0;    --   [0b 0110 0110 1101 0000] -> [asm:  (I):  ORI 	$t1, 0x10]
	0139 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	013a : 2584;    --   [0b 0010 0101 1000 0100] -> [asm: (R2):  OR 	$rc, $at]

	013b : 6040;    --   [0b 0110 0000 0100 0000] -> [398: ANDI  $at, 0]
	013c : 2460;    --   [0b 0010 0100 0110 0000] -> [399: OR    $at, $s0]
	013d : 0c58;    --   [0b 0000 1100 0101 1000] -> [400: SLT   $at, $rc     # compare $s0 and divisor]
	013e : b483;    --   [0b 1011 0100 1000 0011] -> [401: BNE   $at, $r0, 3  # BNE means branch if $s0 < 10000]
	013f : a604;    --   [0b 1010 0110 0000 0100] -> [402: JAL   digitloop]
	0140 : a284;    --   [0b 1010 0010 1000 0100] -> [403: J     digit4]
	0141 : a642;    --   [0b 1010 0110 0100 0010] -> [404: JAL   zeroHandler]
                    --   label: 0142 <- [406: digit4:]
	0142 : 6180;    --   [0b 0110 0001 1000 0000] -> [407: ANDI  $rc, 0]
                    --   auto-gen (0x3e8 > 5bits) <- [408: ORI   $rc, 1000]
	0143 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	0144 : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	0145 : 66c0;    --   [0b 0110 0110 1100 0000] -> [asm:  (I):  ORI 	$t1, 0x0]
	0146 : 72ca;    --   [0b 0111 0010 1100 1010] -> [asm:  (I):  SLLI 	$t1, 0xa]
	0147 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	0148 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	0149 : 66cf;    --   [0b 0110 0110 1100 1111] -> [asm:  (I):  ORI 	$t1, 0xf]
	014a : 72c6;    --   [0b 0111 0010 1100 0110] -> [asm:  (I):  SLLI 	$t1, 0x6]
	014b : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	014c : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	014d : 66e8;    --   [0b 0110 0110 1110 1000] -> [asm:  (I):  ORI 	$t1, 0x28]
	014e : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	014f : 2584;    --   [0b 0010 0101 1000 0100] -> [asm: (R2):  OR 	$rc, $at]

	0150 : 6040;    --   [0b 0110 0000 0100 0000] -> [409: ANDI  $at, 0]
	0151 : 2460;    --   [0b 0010 0100 0110 0000] -> [410: OR    $at, $s0]
	0152 : 0c58;    --   [0b 0000 1100 0101 1000] -> [411: SLT   $at, $rc     # compare $s0 and divisor]
	0153 : b483;    --   [0b 1011 0100 1000 0011] -> [412: BNE   $at, $r0, 3  # BNE means branch if $s0 < 1000]
	0154 : a604;    --   [0b 1010 0110 0000 0100] -> [413: JAL   digitloop]
	0155 : a2ae;    --   [0b 1010 0010 1010 1110] -> [414: J     digit3]
	0156 : a642;    --   [0b 1010 0110 0100 0010] -> [415: JAL   zeroHandler]
                    --   label: 0157 <- [417: digit3:]
	0157 : 6180;    --   [0b 0110 0001 1000 0000] -> [418: ANDI  $rc, 0]
                    --   auto-gen (0x64 > 5bits) <- [419: ORI   $rc, 100]
	0158 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	0159 : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	015a : 66c0;    --   [0b 0110 0110 1100 0000] -> [asm:  (I):  ORI 	$t1, 0x0]
	015b : 72ca;    --   [0b 0111 0010 1100 1010] -> [asm:  (I):  SLLI 	$t1, 0xa]
	015c : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	015d : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	015e : 66c1;    --   [0b 0110 0110 1100 0001] -> [asm:  (I):  ORI 	$t1, 0x1]
	015f : 72c6;    --   [0b 0111 0010 1100 0110] -> [asm:  (I):  SLLI 	$t1, 0x6]
	0160 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	0161 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	0162 : 66e4;    --   [0b 0110 0110 1110 0100] -> [asm:  (I):  ORI 	$t1, 0x24]
	0163 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	0164 : 2584;    --   [0b 0010 0101 1000 0100] -> [asm: (R2):  OR 	$rc, $at]

	0165 : 6040;    --   [0b 0110 0000 0100 0000] -> [420: ANDI  $at, 0]
	0166 : 2460;    --   [0b 0010 0100 0110 0000] -> [421: OR    $at, $s0]
	0167 : 0c58;    --   [0b 0000 1100 0101 1000] -> [422: SLT   $at, $rc     # compare $s0 and divisor]
	0168 : b483;    --   [0b 1011 0100 1000 0011] -> [423: BNE   $at, $r0, 3  # BNE means branch if $s0 < 100]
	0169 : a604;    --   [0b 1010 0110 0000 0100] -> [424: JAL   digitloop]
	016a : a2d8;    --   [0b 1010 0010 1101 1000] -> [425: J     digit2]
	016b : a642;    --   [0b 1010 0110 0100 0010] -> [426: JAL   zeroHandler]
                    --   label: 016c <- [428: digit2:]
	016c : 6180;    --   [0b 0110 0001 1000 0000] -> [429: ANDI  $rc, 0]
	016d : 658a;    --   [0b 0110 0101 1000 1010] -> [430: ORI   $rc, 10]
	016e : 6040;    --   [0b 0110 0000 0100 0000] -> [431: ANDI  $at, 0]
	016f : 2460;    --   [0b 0010 0100 0110 0000] -> [432: OR    $at, $s0]
	0170 : 0c58;    --   [0b 0000 1100 0101 1000] -> [433: SLT   $at, $rc     # compare $s0 and divisor]
	0171 : b483;    --   [0b 1011 0100 1000 0011] -> [434: BNE   $at, $r0, 3  # BNE means branch if $s0 < 10]
	0172 : a604;    --   [0b 1010 0110 0000 0100] -> [435: JAL   digitloop]
	0173 : a2ea;    --   [0b 1010 0010 1110 1010] -> [436: J     digit1]
	0174 : a642;    --   [0b 1010 0110 0100 0010] -> [437: JAL   zeroHandler]
                    --   label: 0175 <- [439: digit1:]
	0175 : 6140;    --   [0b 0110 0001 0100 0000] -> [440: ANDI  $rb, 0       # copy the rest of number $s0 to $rb ]
	0176 : 2560;    --   [0b 0010 0101 0110 0000] -> [441: OR    $rb, $s0     # int_to_char takes $rb to put number char]
	0177 : a614;    --   [0b 1010 0110 0001 0100] -> [442: JAL   int_to_char]
	0178 : c220;    --   [0b 1100 0010 0010 0000] -> [444: LW   $ra, $sp, 0   # restore $ra]
	0179 : 4082;    --   [0b 0100 0000 1000 0010] -> [445: ADDI $sp, 2        # restore $sp and return]
	017a : a900;    --   [0b 1010 1001 0000 0000] -> [446: JR   $ra]
                    --   label: 017b <- [459: stringToInt:]
	017b : 40bc;    --   [0b 0100 0000 1011 1100] -> [460: ADDI  $sp, -4       # 4 byte]
	017c : c941;    --   [0b 1100 1001 0100 0001] -> [461: SW    $sp, $ra, 1   # save return address]
	017d : 6040;    --   [0b 0110 0000 0100 0000] -> [462: ANDI  $at, 0        # move $s0 to $at because SW is O_TYPE that]
	017e : 2460;    --   [0b 0010 0100 0110 0000] -> [463: OR    $at, $s0      # accepts registers r0|at|sp|fp|ra|rb|rc|rd]
	017f : c910;    --   [0b 1100 1001 0001 0000] -> [464: SW    $sp, $at, 0   # saved register $s0 will be used]
	0180 : 6200;    --   [0b 0110 0010 0000 0000] -> [466: ANDI  $s0, 0        # FSM to check if '-' is seen]
	0181 : 6180;    --   [0b 0110 0001 1000 0000] -> [467: ANDI  $rc, 0        # keeps integer]
	0182 : 61c0;    --   [0b 0110 0001 1100 0000] -> [468: ANDI  $rd, 0        # $rd keeps char from getString]
                    --   label: 0183 <- [470: check_negative:]
	0183 : 6140;    --   [0b 0110 0001 0100 0000] -> [471: ANDI  $rb, 0]
                    --   auto-gen (0x346 > 5bits) <- [472: ORI   $rb, str_to_int # $rb stores jump address that would cause autogen]
	0184 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	0185 : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	0186 : 66c0;    --   [0b 0110 0110 1100 0000] -> [asm:  (I):  ORI 	$t1, 0x0]
	0187 : 72ca;    --   [0b 0111 0010 1100 1010] -> [asm:  (I):  SLLI 	$t1, 0xa]
	0188 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	0189 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	018a : 66cd;    --   [0b 0110 0110 1100 1101] -> [asm:  (I):  ORI 	$t1, 0xd]
	018b : 72c6;    --   [0b 0111 0010 1100 0110] -> [asm:  (I):  SLLI 	$t1, 0x6]
	018c : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	018d : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	018e : 66c6;    --   [0b 0110 0110 1100 0110] -> [asm:  (I):  ORI 	$t1, 0x6]
	018f : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	0190 : 2544;    --   [0b 0010 0101 0100 0100] -> [asm: (R2):  OR 	$rb, $at]

	0191 : 6040;    --   [0b 0110 0000 0100 0000] -> [473: ANDI  $at, 0]
	0192 : 2468;    --   [0b 0010 0100 0110 1000] -> [474: OR    $at, $t0]
	0193 : c790;    --   [0b 1100 0111 1001 0000] -> [475: LB    $rd, $at, 0]
	0194 : 6040;    --   [0b 0110 0000 0100 0000] -> [476: ANDI  $at, 0]
	0195 : 646d;    --   [0b 0110 0100 0110 1101] -> [477: ORI   $at, '-']
	0196 : b4f3;    --   [0b 1011 0100 1111 0011] -> [478: BNE   $at, $rd, 3   # go to str_to_int after check negative FSM]
	0197 : 6601;    --   [0b 0110 0110 0000 0001] -> [479: ORI   $s0, 1]
	0198 : 4282;    --   [0b 0100 0010 1000 0010] -> [480: ADDI  $t0, 2        # prepare for next char reading]
	0199 : a940;    --   [0b 1010 1001 0100 0000] -> [481: JR    $rb]
                    --   label: 019a <- [484: mul_10_plus:        # $rc = (($rc << 3) + ($rc << 1)) + $rd]
	019a : 6040;    --   [0b 0110 0000 0100 0000] -> [485: ANDI  $at, 0]
	019b : 2458;    --   [0b 0010 0100 0101 1000] -> [486: OR    $at, $rc]
	019c : 7041;    --   [0b 0111 0000 0100 0001] -> [487: SLLI  $at, 1        # $at is $rc << 1]
	019d : 01c4;    --   [0b 0000 0001 1100 0100] -> [488: ADD   $rd, $at]
	019e : 7042;    --   [0b 0111 0000 0100 0010] -> [489: SLLI  $at, 2        # $at is $rc << 3]
	019f : 01c4;    --   [0b 0000 0001 1100 0100] -> [490: ADD   $rd, $at]
	01a0 : 6180;    --   [0b 0110 0001 1000 0000] -> [491: ANDI  $rc, 0]
	01a1 : 259c;    --   [0b 0010 0101 1001 1100] -> [492: OR    $rc, $rd      # copy result to $rc]
	01a2 : a940;    --   [0b 1010 1001 0100 0000] -> [493: JR    $rb]
                    --   label: 01a3 <- [496: str_to_int:]
	01a3 : 6040;    --   [0b 0110 0000 0100 0000] -> [497: ANDI  $at, 0]
	01a4 : 2468;    --   [0b 0010 0100 0110 1000] -> [498: OR    $at, $t0        # load byte char from memory at $t0]
	01a5 : 61c0;    --   [0b 0110 0001 1100 0000] -> [499: ANDI  $rd, 0]
	01a6 : c790;    --   [0b 1100 0111 1001 0000] -> [500: LB    $rd, $at, 0     # $rd = $($t0 + 0) for one byte]
	01a7 : 6240;    --   [0b 0110 0010 0100 0000] -> [501: ANDI  $s1, 0]
                    --   auto-gen (0x380 > 5bits) <- [502: ORI   $s1, generate_int # $s1 stores jump address that would cause autogen]
	01a8 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	01a9 : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	01aa : 66c0;    --   [0b 0110 0110 1100 0000] -> [asm:  (I):  ORI 	$t1, 0x0]
	01ab : 72ca;    --   [0b 0111 0010 1100 1010] -> [asm:  (I):  SLLI 	$t1, 0xa]
	01ac : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	01ad : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	01ae : 66ce;    --   [0b 0110 0110 1100 1110] -> [asm:  (I):  ORI 	$t1, 0xe]
	01af : 72c6;    --   [0b 0111 0010 1100 0110] -> [asm:  (I):  SLLI 	$t1, 0x6]
	01b0 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	01b1 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	01b2 : 66c0;    --   [0b 0110 0110 1100 0000] -> [asm:  (I):  ORI 	$t1, 0x0]
	01b3 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	01b4 : 2644;    --   [0b 0010 0110 0100 0100] -> [asm: (R2):  OR 	$s1, $at]

	01b5 : 6040;    --   [0b 0110 0000 0100 0000] -> [503: ANDI  $at, 0]
	01b6 : 6440;    --   [0b 0110 0100 0100 0000] -> [504: ORI   $at, 0          # 0 is null char]
	01b7 : b4f2;    --   [0b 1011 0100 1111 0010] -> [505: BNE   $at, $rd, 2     # check if char $rd is null character]
	01b8 : aa40;    --   [0b 1010 1010 0100 0000] -> [506: JR    $s1]
	01b9 : 6040;    --   [0b 0110 0000 0100 0000] -> [508: ANDI  $at, 0]
	01ba : 644a;    --   [0b 0110 0100 0100 1010] -> [509: ORI   $at, 10         # ascii code for newline '\n']
	01bb : b4f2;    --   [0b 1011 0100 1111 0010] -> [511: BNE   $at, $rd, 2     # check if char $rd is new line ]
	01bc : aa40;    --   [0b 1010 1010 0100 0000] -> [512: JR    $s1]
	01bd : 4282;    --   [0b 0100 0010 1000 0010] -> [514: ADDI  $t0, 2          # prepare for reading next char]
	01be : 61cf;    --   [0b 0110 0001 1100 1111] -> [515: ANDI  $rd, 0x000f     # convert number char to number]
	01bf : a334;    --   [0b 1010 0011 0011 0100] -> [516: J     mul_10_plus     # $rc = 10 * $rc + $rd]
                    --   label: 01c0 <- [518: generate_int:]
	01c0 : 6280;    --   [0b 0110 0010 1000 0000] -> [519: ANDI  $t0, 0]
                    --   auto-gen (0x3c0 > 5bits) <- [520: ORI   $t0, move_to_t0 # $t0 stores jump address that would cause autogen]
	01c1 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	01c2 : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	01c3 : 66c0;    --   [0b 0110 0110 1100 0000] -> [asm:  (I):  ORI 	$t1, 0x0]
	01c4 : 72ca;    --   [0b 0111 0010 1100 1010] -> [asm:  (I):  SLLI 	$t1, 0xa]
	01c5 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	01c6 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	01c7 : 66cf;    --   [0b 0110 0110 1100 1111] -> [asm:  (I):  ORI 	$t1, 0xf]
	01c8 : 72c6;    --   [0b 0111 0010 1100 0110] -> [asm:  (I):  SLLI 	$t1, 0x6]
	01c9 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	01ca : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	01cb : 66c0;    --   [0b 0110 0110 1100 0000] -> [asm:  (I):  ORI 	$t1, 0x0]
	01cc : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	01cd : 2684;    --   [0b 0010 0110 1000 0100] -> [asm: (R2):  OR 	$t0, $at]

	01ce : 6040;    --   [0b 0110 0000 0100 0000] -> [521: ANDI  $at, 0]
	01cf : 2460;    --   [0b 0010 0100 0110 0000] -> [522: OR    $at, $s0]
	01d0 : b482;    --   [0b 1011 0100 1000 0010] -> [523: BNE   $at, $r0, 2     # need to handle negative if s0 is not zero]
	01d1 : aa80;    --   [0b 1010 1010 1000 0000] -> [524: JR    $t0     ]
                    --   auto-gen (0xffff > 5bits) <- [526: XORI  $rc, 0xffff]
	01d2 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	01d3 : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	01d4 : 66ff;    --   [0b 0110 0110 1111 1111] -> [asm:  (I):  ORI 	$t1, 0x3f]
	01d5 : 72ca;    --   [0b 0111 0010 1100 1010] -> [asm:  (I):  SLLI 	$t1, 0xa]
	01d6 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	01d7 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	01d8 : 66cf;    --   [0b 0110 0110 1100 1111] -> [asm:  (I):  ORI 	$t1, 0xf]
	01d9 : 72c6;    --   [0b 0111 0010 1100 0110] -> [asm:  (I):  SLLI 	$t1, 0x6]
	01da : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	01db : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	01dc : 66ff;    --   [0b 0110 0110 1111 1111] -> [asm:  (I):  ORI 	$t1, 0x3f]
	01dd : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	01de : 2984;    --   [0b 0010 1001 1000 0100] -> [asm: (R2):  XOR 	$rc, $at]

	01df : 4181;    --   [0b 0100 0001 1000 0001] -> [527: ADDI  $rc, 1          # negate. -$rc = ~$rc + 1]
                    --   label: 01e0 <- [529: move_to_t0:]
	01e0 : 6280;    --   [0b 0110 0010 1000 0000] -> [530: ANDI  $t0, 0]
	01e1 : 2698;    --   [0b 0010 0110 1001 1000] -> [531: OR    $t0, $rc]
	01e2 : c0a0;    --   [0b 1100 0000 1010 0000] -> [533: LW    $at, $sp, 0   ]
	01e3 : 6200;    --   [0b 0110 0010 0000 0000] -> [534: ANDI  $s0, 0]
	01e4 : 2604;    --   [0b 0010 0110 0000 0100] -> [535: OR    $s0, $at      # restore $s1]
	01e5 : c221;    --   [0b 1100 0010 0010 0001] -> [536: LW    $ra, $sp, 1   # restore $ra ]
	01e6 : 4084;    --   [0b 0100 0000 1000 0100] -> [537: ADDI  $sp, 4        # restore $sp and return]
	01e7 : a900;    --   [0b 1010 1001 0000 0000] -> [538: JR    $ra]
                    --   label: 01e8 <- [554: multiply:]
	01e8 : 40be;    --   [0b 0100 0000 1011 1110] -> [555: ADDI  $sp, -2]
	01e9 : c940;    --   [0b 1100 1001 0100 0000] -> [556: SW    $sp, $ra, 0 ]
	01ea : 6200;    --   [0b 0110 0010 0000 0000] -> [558: ANDI  $s0, 0        # FSM to check negative seen 0/1/2 times]
	01eb : 6040;    --   [0b 0110 0000 0100 0000] -> [559: ANDI  $at, 0        # assembler temporary]
	01ec : 6100;    --   [0b 0110 0001 0000 0000] -> [560: ANDI  $ra, 0]
	01ed : 2528;    --   [0b 0010 0101 0010 1000] -> [561: OR    $ra, $t0      # copy int a for multiplication base]
	01ee : 6280;    --   [0b 0110 0010 1000 0000] -> [562: ANDI  $t0, 0        # collect temporary answer]
                    --   label: 01ef <- [564: check_arg_a:]
	01ef : 6240;    --   [0b 0110 0010 0100 0000] -> [565: ANDI  $s1, 0        # $s1 stores jump address that would cause autogen]
                    --   auto-gen (0x43a > 5bits) <- [566: ORI   $s1, check_arg_b]
	01f0 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	01f1 : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	01f2 : 66c1;    --   [0b 0110 0110 1100 0001] -> [asm:  (I):  ORI 	$t1, 0x1]
	01f3 : 72ca;    --   [0b 0111 0010 1100 1010] -> [asm:  (I):  SLLI 	$t1, 0xa]
	01f4 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	01f5 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	01f6 : 66c0;    --   [0b 0110 0110 1100 0000] -> [asm:  (I):  ORI 	$t1, 0x0]
	01f7 : 72c6;    --   [0b 0111 0010 1100 0110] -> [asm:  (I):  SLLI 	$t1, 0x6]
	01f8 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	01f9 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	01fa : 66fa;    --   [0b 0110 0110 1111 1010] -> [asm:  (I):  ORI 	$t1, 0x3a]
	01fb : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	01fc : 2644;    --   [0b 0010 0110 0100 0100] -> [asm: (R2):  OR 	$s1, $at]

	01fd : 6040;    --   [0b 0110 0000 0100 0000] -> [567: ANDI  $at, 0]
                    --   auto-gen (0x8000 > 5bits) <- [568: ORI   $at, 0x8000   # leftmost bit check bit]
	01fe : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	01ff : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	0200 : 66e0;    --   [0b 0110 0110 1110 0000] -> [asm:  (I):  ORI 	$t1, 0x20]
	0201 : 72ca;    --   [0b 0111 0010 1100 1010] -> [asm:  (I):  SLLI 	$t1, 0xa]
	0202 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	0203 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	0204 : 66c0;    --   [0b 0110 0110 1100 0000] -> [asm:  (I):  ORI 	$t1, 0x0]
	0205 : 72c6;    --   [0b 0111 0010 1100 0110] -> [asm:  (I):  SLLI 	$t1, 0x6]
	0206 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	0207 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	0208 : 66c0;    --   [0b 0110 0110 1100 0000] -> [asm:  (I):  ORI 	$t1, 0x0]
	0209 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	020a : 2444;    --   [0b 0010 0100 0100 0100] -> [asm: (R2):  OR 	$at, $at]

	020b : 2050;    --   [0b 0010 0000 0101 0000] -> [569: AND   $at, $ra      # mask $ra to check negative sign for a]
	020c : b482;    --   [0b 1011 0100 1000 0010] -> [570: BNE   $at, $r0, 2   # branch if negative]
	020d : aa40;    --   [0b 1010 1010 0100 0000] -> [571: JR    $s1]
	020e : 4201;    --   [0b 0100 0010 0000 0001] -> [572: ADDI  $s0, 1        # mark as negative (+1)]
                    --   auto-gen (0xffff > 5bits) <- [573: XORI  $ra, 0xffff]
	020f : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	0210 : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	0211 : 66ff;    --   [0b 0110 0110 1111 1111] -> [asm:  (I):  ORI 	$t1, 0x3f]
	0212 : 72ca;    --   [0b 0111 0010 1100 1010] -> [asm:  (I):  SLLI 	$t1, 0xa]
	0213 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	0214 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	0215 : 66cf;    --   [0b 0110 0110 1100 1111] -> [asm:  (I):  ORI 	$t1, 0xf]
	0216 : 72c6;    --   [0b 0111 0010 1100 0110] -> [asm:  (I):  SLLI 	$t1, 0x6]
	0217 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	0218 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	0219 : 66ff;    --   [0b 0110 0110 1111 1111] -> [asm:  (I):  ORI 	$t1, 0x3f]
	021a : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	021b : 2904;    --   [0b 0010 1001 0000 0100] -> [asm: (R2):  XOR 	$ra, $at]

	021c : 4101;    --   [0b 0100 0001 0000 0001] -> [574: ADDI  $ra, 1        # negate  a]
                    --   label: 021d <- [576: check_arg_b:]
	021d : 6240;    --   [0b 0110 0010 0100 0000] -> [577: ANDI  $s1, 0        # $s1 stores jump address that would cause autogen]
                    --   auto-gen (0x496 > 5bits) <- [578: ORI   $s1, multloop]
	021e : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	021f : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	0220 : 66c1;    --   [0b 0110 0110 1100 0001] -> [asm:  (I):  ORI 	$t1, 0x1]
	0221 : 72ca;    --   [0b 0111 0010 1100 1010] -> [asm:  (I):  SLLI 	$t1, 0xa]
	0222 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	0223 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	0224 : 66c2;    --   [0b 0110 0110 1100 0010] -> [asm:  (I):  ORI 	$t1, 0x2]
	0225 : 72c6;    --   [0b 0111 0010 1100 0110] -> [asm:  (I):  SLLI 	$t1, 0x6]
	0226 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	0227 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	0228 : 66d6;    --   [0b 0110 0110 1101 0110] -> [asm:  (I):  ORI 	$t1, 0x16]
	0229 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	022a : 2644;    --   [0b 0010 0110 0100 0100] -> [asm: (R2):  OR 	$s1, $at]

	022b : 6040;    --   [0b 0110 0000 0100 0000] -> [579: ANDI  $at, 0        # reset to check negative sign for b]
                    --   auto-gen (0x8000 > 5bits) <- [580: ORI   $at, 0x8000]
	022c : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	022d : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	022e : 66e0;    --   [0b 0110 0110 1110 0000] -> [asm:  (I):  ORI 	$t1, 0x20]
	022f : 72ca;    --   [0b 0111 0010 1100 1010] -> [asm:  (I):  SLLI 	$t1, 0xa]
	0230 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	0231 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	0232 : 66c0;    --   [0b 0110 0110 1100 0000] -> [asm:  (I):  ORI 	$t1, 0x0]
	0233 : 72c6;    --   [0b 0111 0010 1100 0110] -> [asm:  (I):  SLLI 	$t1, 0x6]
	0234 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	0235 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	0236 : 66c0;    --   [0b 0110 0110 1100 0000] -> [asm:  (I):  ORI 	$t1, 0x0]
	0237 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	0238 : 2444;    --   [0b 0010 0100 0100 0100] -> [asm: (R2):  OR 	$at, $at]

	0239 : 2054;    --   [0b 0010 0000 0101 0100] -> [581: AND   $at, $rb      # mask $rb to check negative sign for b]
	023a : b482;    --   [0b 1011 0100 1000 0010] -> [582: BNE   $at, $r0, 2]
	023b : aa40;    --   [0b 1010 1010 0100 0000] -> [583: JR    $s1]
	023c : 4201;    --   [0b 0100 0010 0000 0001] -> [584: ADDI  $s0, 1        # mark as negative ($s0 is now 1 or 2)]
                    --   auto-gen (0xffff > 5bits) <- [585: XORI  $rb, 0xffff]
	023d : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	023e : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	023f : 66ff;    --   [0b 0110 0110 1111 1111] -> [asm:  (I):  ORI 	$t1, 0x3f]
	0240 : 72ca;    --   [0b 0111 0010 1100 1010] -> [asm:  (I):  SLLI 	$t1, 0xa]
	0241 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	0242 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	0243 : 66cf;    --   [0b 0110 0110 1100 1111] -> [asm:  (I):  ORI 	$t1, 0xf]
	0244 : 72c6;    --   [0b 0111 0010 1100 0110] -> [asm:  (I):  SLLI 	$t1, 0x6]
	0245 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	0246 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	0247 : 66ff;    --   [0b 0110 0110 1111 1111] -> [asm:  (I):  ORI 	$t1, 0x3f]
	0248 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	0249 : 2944;    --   [0b 0010 1001 0100 0100] -> [asm: (R2):  XOR 	$rb, $at]

	024a : 4141;    --   [0b 0100 0001 0100 0001] -> [586: ADDI  $rb, 1]
                    --   label: 024b <- [588: multloop:           # $t0 keeps track of potential result]
	024b : 62c0;    --   [0b 0110 0010 1100 0000] -> [589: ANDI  $t1, 0        # $t1 stores jump address that would cause autogen]
                    --   auto-gen (0x4bc > 5bits) <- [590: ORI   $t1, handle_negative]
	024c : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	024d : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	024e : 66c1;    --   [0b 0110 0110 1100 0001] -> [asm:  (I):  ORI 	$t1, 0x1]
	024f : 72ca;    --   [0b 0111 0010 1100 1010] -> [asm:  (I):  SLLI 	$t1, 0xa]
	0250 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	0251 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	0252 : 66c2;    --   [0b 0110 0110 1100 0010] -> [asm:  (I):  ORI 	$t1, 0x2]
	0253 : 72c6;    --   [0b 0111 0010 1100 0110] -> [asm:  (I):  SLLI 	$t1, 0x6]
	0254 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	0255 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	0256 : 66fc;    --   [0b 0110 0110 1111 1100] -> [asm:  (I):  ORI 	$t1, 0x3c]
	0257 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	0258 : 26c4;    --   [0b 0010 0110 1100 0100] -> [asm: (R2):  OR 	$t1, $at]

	0259 : b682;    --   [0b 1011 0110 1000 0010] -> [591: BNE   $rb, $r0, 2   # exit loop if $rb is zero]
	025a : aac0;    --   [0b 1010 1010 1100 0000] -> [592: JR    $t1           # $t1 is handle_negative]
	025b : 0290;    --   [0b 0000 0010 1001 0000] -> [593: ADD   $t0, $ra]
	025c : 417f;    --   [0b 0100 0001 0111 1111] -> [594: ADDI  $rb, -1]
	025d : aa40;    --   [0b 1010 1010 0100 0000] -> [595: JR    $s1           # $s1 is multloop]
                    --   label: 025e <- [597: handle_negative:]
	025e : 61c0;    --   [0b 0110 0001 1100 0000] -> [598: ANDI  $rd, 0        # test if $s0 is 1 (0 or 2 means result is positive)]
	025f : 25e0;    --   [0b 0010 0101 1110 0000] -> [599: OR    $rd, $s0]
	0260 : 6180;    --   [0b 0110 0001 1000 0000] -> [600: ANDI  $rc, 0]
	0261 : 4181;    --   [0b 0100 0001 1000 0001] -> [601: ADDI  $rc, 1]
	0262 : 6240;    --   [0b 0110 0010 0100 0000] -> [603: ANDI  $s1, 0        # $s1 store address > 0x3ff that cause autogen for Jump]
                    --   auto-gen (0x500 > 5bits) <- [604: ORI   $s1, mult_end ]
	0263 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	0264 : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	0265 : 66c1;    --   [0b 0110 0110 1100 0001] -> [asm:  (I):  ORI 	$t1, 0x1]
	0266 : 72ca;    --   [0b 0111 0010 1100 1010] -> [asm:  (I):  SLLI 	$t1, 0xa]
	0267 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	0268 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	0269 : 66c4;    --   [0b 0110 0110 1100 0100] -> [asm:  (I):  ORI 	$t1, 0x4]
	026a : 72c6;    --   [0b 0111 0010 1100 0110] -> [asm:  (I):  SLLI 	$t1, 0x6]
	026b : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	026c : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	026d : 66c0;    --   [0b 0110 0110 1100 0000] -> [asm:  (I):  ORI 	$t1, 0x0]
	026e : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	026f : 2644;    --   [0b 0010 0110 0100 0100] -> [asm: (R2):  OR 	$s1, $at]

	0270 : b372;    --   [0b 1011 0011 0111 0010] -> [605: BEQ   $rc, $rd, 2   # branch if negative sign is 1]
	0271 : aa40;    --   [0b 1010 1010 0100 0000] -> [606: JR    $s1]
                    --   auto-gen (0xffff > 5bits) <- [607: XORI  $t0, 0xffff]
	0272 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	0273 : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	0274 : 66ff;    --   [0b 0110 0110 1111 1111] -> [asm:  (I):  ORI 	$t1, 0x3f]
	0275 : 72ca;    --   [0b 0111 0010 1100 1010] -> [asm:  (I):  SLLI 	$t1, 0xa]
	0276 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	0277 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	0278 : 66cf;    --   [0b 0110 0110 1100 1111] -> [asm:  (I):  ORI 	$t1, 0xf]
	0279 : 72c6;    --   [0b 0111 0010 1100 0110] -> [asm:  (I):  SLLI 	$t1, 0x6]
	027a : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	027b : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	027c : 66ff;    --   [0b 0110 0110 1111 1111] -> [asm:  (I):  ORI 	$t1, 0x3f]
	027d : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	027e : 2a84;    --   [0b 0010 1010 1000 0100] -> [asm: (R2):  XOR 	$t0, $at]

	027f : 4281;    --   [0b 0100 0010 1000 0001] -> [608: ADDI  $t0, 1        # negate $at]
                    --   label: 0280 <- [610: mult_end:]
	0280 : c220;    --   [0b 1100 0010 0010 0000] -> [611: LW    $ra, $sp, 0   # restore $ra and return]
	0281 : 4082;    --   [0b 0100 0000 1000 0010] -> [612: ADDI  $sp, 2]
	0282 : a900;    --   [0b 1010 1001 0000 0000] -> [613: JR    $ra]
                    --   label: 0283 <- [626: multiply_service:]
	0283 : 40be;    --   [0b 0100 0000 1011 1110] -> [627: ADDI  $sp, -2]
	0284 : c940;    --   [0b 1100 1001 0100 0000] -> [628: SW    $sp, $ra, 0 ]
	0285 : 6280;    --   [0b 0110 0010 1000 0000] -> [630: ANDI  $t0, 0]
                    --   auto-gen (0xe000 > 5bits) <- [631: ORI   $t0, CONST_prompt1  # prompt to input first number]
	0286 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	0287 : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	0288 : 66f8;    --   [0b 0110 0110 1111 1000] -> [asm:  (I):  ORI 	$t1, 0x38]
	0289 : 72ca;    --   [0b 0111 0010 1100 1010] -> [asm:  (I):  SLLI 	$t1, 0xa]
	028a : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	028b : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	028c : 66c0;    --   [0b 0110 0110 1100 0000] -> [asm:  (I):  ORI 	$t1, 0x0]
	028d : 72c6;    --   [0b 0111 0010 1100 0110] -> [asm:  (I):  SLLI 	$t1, 0x6]
	028e : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	028f : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	0290 : 66c0;    --   [0b 0110 0110 1100 0000] -> [asm:  (I):  ORI 	$t1, 0x0]
	0291 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	0292 : 2684;    --   [0b 0010 0110 1000 0100] -> [asm: (R2):  OR 	$t0, $at]

	0293 : a504;    --   [0b 1010 0101 0000 0100] -> [632: JAL   putString]
	0294 : 6280;    --   [0b 0110 0010 1000 0000] -> [634: ANDI  $t0, 0]
                    --   auto-gen (0xe0cc > 5bits) <- [635: ORI   $t0, CHAR_mem       # string buffer for multiplicand]
	0295 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	0296 : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	0297 : 66f8;    --   [0b 0110 0110 1111 1000] -> [asm:  (I):  ORI 	$t1, 0x38]
	0298 : 72ca;    --   [0b 0111 0010 1100 1010] -> [asm:  (I):  SLLI 	$t1, 0xa]
	0299 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	029a : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	029b : 66c3;    --   [0b 0110 0110 1100 0011] -> [asm:  (I):  ORI 	$t1, 0x3]
	029c : 72c6;    --   [0b 0111 0010 1100 0110] -> [asm:  (I):  SLLI 	$t1, 0x6]
	029d : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	029e : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	029f : 66cc;    --   [0b 0110 0110 1100 1100] -> [asm:  (I):  ORI 	$t1, 0xc]
	02a0 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	02a1 : 2684;    --   [0b 0010 0110 1000 0100] -> [asm: (R2):  OR 	$t0, $at]

	02a2 : a536;    --   [0b 1010 0101 0011 0110] -> [636: JAL   getString]
	02a3 : 6280;    --   [0b 0110 0010 1000 0000] -> [637: ANDI  $t0, 0]
                    --   auto-gen (0xe0cc > 5bits) <- [638: ORI   $t0, CHAR_mem]
	02a4 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	02a5 : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	02a6 : 66f8;    --   [0b 0110 0110 1111 1000] -> [asm:  (I):  ORI 	$t1, 0x38]
	02a7 : 72ca;    --   [0b 0111 0010 1100 1010] -> [asm:  (I):  SLLI 	$t1, 0xa]
	02a8 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	02a9 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	02aa : 66c3;    --   [0b 0110 0110 1100 0011] -> [asm:  (I):  ORI 	$t1, 0x3]
	02ab : 72c6;    --   [0b 0111 0010 1100 0110] -> [asm:  (I):  SLLI 	$t1, 0x6]
	02ac : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	02ad : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	02ae : 66cc;    --   [0b 0110 0110 1100 1100] -> [asm:  (I):  ORI 	$t1, 0xc]
	02af : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	02b0 : 2684;    --   [0b 0010 0110 1000 0100] -> [asm: (R2):  OR 	$t0, $at]

	02b1 : a6f6;    --   [0b 1010 0110 1111 0110] -> [639: JAL   stringToInt]
	02b2 : 6200;    --   [0b 0110 0010 0000 0000] -> [641: ANDI  $s0, 0              # save for multiply]
	02b3 : 2628;    --   [0b 0010 0110 0010 1000] -> [642: OR    $s0, $t0]
	02b4 : 6280;    --   [0b 0110 0010 1000 0000] -> [643: ANDI  $t0, 0]
                    --   auto-gen (0xe00c > 5bits) <- [644: ORI   $t0, CONST_prompt2  # prompt to input second number]
	02b5 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	02b6 : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	02b7 : 66f8;    --   [0b 0110 0110 1111 1000] -> [asm:  (I):  ORI 	$t1, 0x38]
	02b8 : 72ca;    --   [0b 0111 0010 1100 1010] -> [asm:  (I):  SLLI 	$t1, 0xa]
	02b9 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	02ba : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	02bb : 66c0;    --   [0b 0110 0110 1100 0000] -> [asm:  (I):  ORI 	$t1, 0x0]
	02bc : 72c6;    --   [0b 0111 0010 1100 0110] -> [asm:  (I):  SLLI 	$t1, 0x6]
	02bd : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	02be : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	02bf : 66cc;    --   [0b 0110 0110 1100 1100] -> [asm:  (I):  ORI 	$t1, 0xc]
	02c0 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	02c1 : 2684;    --   [0b 0010 0110 1000 0100] -> [asm: (R2):  OR 	$t0, $at]

	02c2 : a504;    --   [0b 1010 0101 0000 0100] -> [645: JAL   putString]
	02c3 : 6280;    --   [0b 0110 0010 1000 0000] -> [647: ANDI  $t0, 0]
                    --   auto-gen (0xe0cc > 5bits) <- [648: ORI   $t0, CHAR_mem       # string buffer for multiplier]
	02c4 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	02c5 : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	02c6 : 66f8;    --   [0b 0110 0110 1111 1000] -> [asm:  (I):  ORI 	$t1, 0x38]
	02c7 : 72ca;    --   [0b 0111 0010 1100 1010] -> [asm:  (I):  SLLI 	$t1, 0xa]
	02c8 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	02c9 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	02ca : 66c3;    --   [0b 0110 0110 1100 0011] -> [asm:  (I):  ORI 	$t1, 0x3]
	02cb : 72c6;    --   [0b 0111 0010 1100 0110] -> [asm:  (I):  SLLI 	$t1, 0x6]
	02cc : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	02cd : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	02ce : 66cc;    --   [0b 0110 0110 1100 1100] -> [asm:  (I):  ORI 	$t1, 0xc]
	02cf : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	02d0 : 2684;    --   [0b 0010 0110 1000 0100] -> [asm: (R2):  OR 	$t0, $at]

	02d1 : a536;    --   [0b 1010 0101 0011 0110] -> [649: JAL   getString]
	02d2 : 6280;    --   [0b 0110 0010 1000 0000] -> [650: ANDI  $t0, 0]
                    --   auto-gen (0xe0cc > 5bits) <- [651: ORI   $t0, CHAR_mem]
	02d3 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	02d4 : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	02d5 : 66f8;    --   [0b 0110 0110 1111 1000] -> [asm:  (I):  ORI 	$t1, 0x38]
	02d6 : 72ca;    --   [0b 0111 0010 1100 1010] -> [asm:  (I):  SLLI 	$t1, 0xa]
	02d7 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	02d8 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	02d9 : 66c3;    --   [0b 0110 0110 1100 0011] -> [asm:  (I):  ORI 	$t1, 0x3]
	02da : 72c6;    --   [0b 0111 0010 1100 0110] -> [asm:  (I):  SLLI 	$t1, 0x6]
	02db : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	02dc : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	02dd : 66cc;    --   [0b 0110 0110 1100 1100] -> [asm:  (I):  ORI 	$t1, 0xc]
	02de : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	02df : 2684;    --   [0b 0010 0110 1000 0100] -> [asm: (R2):  OR 	$t0, $at]

	02e0 : a6f6;    --   [0b 1010 0110 1111 0110] -> [652: JAL   stringToInt]
	02e1 : 6140;    --   [0b 0110 0001 0100 0000] -> [654: ANDI  $rb, 0]
	02e2 : 2560;    --   [0b 0010 0101 0110 0000] -> [655: OR    $rb, $s0            # set multiplier to $rb]
	02e3 : a7d0;    --   [0b 1010 0111 1101 0000] -> [656: JAL   multiply            # multiplicand is already set at $t0 ]
	02e4 : 6200;    --   [0b 0110 0010 0000 0000] -> [658: ANDI  $s0, 0]
	02e5 : 2628;    --   [0b 0010 0110 0010 1000] -> [659: OR    $s0, $t0            # save answer]
	02e6 : 6280;    --   [0b 0110 0010 1000 0000] -> [660: ANDI  $t0, 0]
                    --   auto-gen (0xe018 > 5bits) <- [661: ORI   $t0, CONST_answer]
	02e7 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	02e8 : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	02e9 : 66f8;    --   [0b 0110 0110 1111 1000] -> [asm:  (I):  ORI 	$t1, 0x38]
	02ea : 72ca;    --   [0b 0111 0010 1100 1010] -> [asm:  (I):  SLLI 	$t1, 0xa]
	02eb : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	02ec : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	02ed : 66c0;    --   [0b 0110 0110 1100 0000] -> [asm:  (I):  ORI 	$t1, 0x0]
	02ee : 72c6;    --   [0b 0111 0010 1100 0110] -> [asm:  (I):  SLLI 	$t1, 0x6]
	02ef : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	02f0 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	02f1 : 66d8;    --   [0b 0110 0110 1101 1000] -> [asm:  (I):  ORI 	$t1, 0x18]
	02f2 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	02f3 : 2684;    --   [0b 0010 0110 1000 0100] -> [asm: (R2):  OR 	$t0, $at]

	02f4 : a504;    --   [0b 1010 0101 0000 0100] -> [662: JAL   putString]
	02f5 : 6280;    --   [0b 0110 0010 1000 0000] -> [663: ANDI  $t0, 0]
	02f6 : 26a0;    --   [0b 0010 0110 1010 0000] -> [664: OR    $t0, $s0]
	02f7 : a5b2;    --   [0b 1010 0101 1011 0010] -> [665: JAL   intToString         # output answer as string]
	02f8 : 6280;    --   [0b 0110 0010 1000 0000] -> [667: ANDI  $t0, 0]
	02f9 : 668a;    --   [0b 0110 0110 1000 1010] -> [668: ORI   $t0, 10             # add '\n']
	02fa : a43a;    --   [0b 1010 0100 0011 1010] -> [669: JAL   putchar]
	02fb : c220;    --   [0b 1100 0010 0010 0000] -> [671: LW    $ra, $sp, 0         # restore $ra and return]
	02fc : 4082;    --   [0b 0100 0000 1000 0010] -> [672: ADDI  $sp, 2]
	02fd : a900;    --   [0b 1010 1001 0000 0000] -> [673: JR    $ra]
                    --   label: 02fe <- [679: barrel_shift_service:]
	02fe : 40be;    --   [0b 0100 0000 1011 1110] -> [680: ADDI  $sp, -2]
	02ff : c940;    --   [0b 1100 1001 0100 0000] -> [681: SW    $sp, $ra, 0 ]
	0300 : 6280;    --   [0b 0110 0010 1000 0000] -> [683: ANDI  $t0, 0]
                    --   auto-gen (0xe000 > 5bits) <- [684: ORI   $t0, CONST_prompt1  # prompt to input first number]
	0301 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	0302 : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	0303 : 66f8;    --   [0b 0110 0110 1111 1000] -> [asm:  (I):  ORI 	$t1, 0x38]
	0304 : 72ca;    --   [0b 0111 0010 1100 1010] -> [asm:  (I):  SLLI 	$t1, 0xa]
	0305 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	0306 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	0307 : 66c0;    --   [0b 0110 0110 1100 0000] -> [asm:  (I):  ORI 	$t1, 0x0]
	0308 : 72c6;    --   [0b 0111 0010 1100 0110] -> [asm:  (I):  SLLI 	$t1, 0x6]
	0309 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	030a : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	030b : 66c0;    --   [0b 0110 0110 1100 0000] -> [asm:  (I):  ORI 	$t1, 0x0]
	030c : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	030d : 2684;    --   [0b 0010 0110 1000 0100] -> [asm: (R2):  OR 	$t0, $at]

	030e : a504;    --   [0b 1010 0101 0000 0100] -> [685: JAL   putString]
	030f : 6280;    --   [0b 0110 0010 1000 0000] -> [687: ANDI  $t0, 0]
                    --   auto-gen (0xe0cc > 5bits) <- [688: ORI   $t0, CHAR_mem       # string buffer for multiplicand]
	0310 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	0311 : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	0312 : 66f8;    --   [0b 0110 0110 1111 1000] -> [asm:  (I):  ORI 	$t1, 0x38]
	0313 : 72ca;    --   [0b 0111 0010 1100 1010] -> [asm:  (I):  SLLI 	$t1, 0xa]
	0314 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	0315 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	0316 : 66c3;    --   [0b 0110 0110 1100 0011] -> [asm:  (I):  ORI 	$t1, 0x3]
	0317 : 72c6;    --   [0b 0111 0010 1100 0110] -> [asm:  (I):  SLLI 	$t1, 0x6]
	0318 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	0319 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	031a : 66cc;    --   [0b 0110 0110 1100 1100] -> [asm:  (I):  ORI 	$t1, 0xc]
	031b : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	031c : 2684;    --   [0b 0010 0110 1000 0100] -> [asm: (R2):  OR 	$t0, $at]

	031d : a536;    --   [0b 1010 0101 0011 0110] -> [689: JAL   getString]
	031e : 6280;    --   [0b 0110 0010 1000 0000] -> [690: ANDI  $t0, 0]
                    --   auto-gen (0xe0cc > 5bits) <- [691: ORI   $t0, CHAR_mem]
	031f : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	0320 : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	0321 : 66f8;    --   [0b 0110 0110 1111 1000] -> [asm:  (I):  ORI 	$t1, 0x38]
	0322 : 72ca;    --   [0b 0111 0010 1100 1010] -> [asm:  (I):  SLLI 	$t1, 0xa]
	0323 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	0324 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	0325 : 66c3;    --   [0b 0110 0110 1100 0011] -> [asm:  (I):  ORI 	$t1, 0x3]
	0326 : 72c6;    --   [0b 0111 0010 1100 0110] -> [asm:  (I):  SLLI 	$t1, 0x6]
	0327 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	0328 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	0329 : 66cc;    --   [0b 0110 0110 1100 1100] -> [asm:  (I):  ORI 	$t1, 0xc]
	032a : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	032b : 2684;    --   [0b 0010 0110 1000 0100] -> [asm: (R2):  OR 	$t0, $at]

	032c : a6f6;    --   [0b 1010 0110 1111 0110] -> [692: JAL   stringToInt]
	032d : 6200;    --   [0b 0110 0010 0000 0000] -> [694: ANDI  $s0, 0              # save for multiply]
	032e : 2628;    --   [0b 0010 0110 0010 1000] -> [695: OR    $s0, $t0]
	032f : 6280;    --   [0b 0110 0010 1000 0000] -> [696: ANDI  $t0, 0]
                    --   auto-gen (0xe00c > 5bits) <- [697: ORI   $t0, CONST_prompt2  # prompt to input second number]
	0330 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	0331 : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	0332 : 66f8;    --   [0b 0110 0110 1111 1000] -> [asm:  (I):  ORI 	$t1, 0x38]
	0333 : 72ca;    --   [0b 0111 0010 1100 1010] -> [asm:  (I):  SLLI 	$t1, 0xa]
	0334 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	0335 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	0336 : 66c0;    --   [0b 0110 0110 1100 0000] -> [asm:  (I):  ORI 	$t1, 0x0]
	0337 : 72c6;    --   [0b 0111 0010 1100 0110] -> [asm:  (I):  SLLI 	$t1, 0x6]
	0338 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	0339 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	033a : 66cc;    --   [0b 0110 0110 1100 1100] -> [asm:  (I):  ORI 	$t1, 0xc]
	033b : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	033c : 2684;    --   [0b 0010 0110 1000 0100] -> [asm: (R2):  OR 	$t0, $at]

	033d : a504;    --   [0b 1010 0101 0000 0100] -> [698: JAL   putString]
	033e : 6280;    --   [0b 0110 0010 1000 0000] -> [700: ANDI  $t0, 0]
                    --   auto-gen (0xe0cc > 5bits) <- [701: ORI   $t0, CHAR_mem       # string buffer for multiplier]
	033f : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	0340 : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	0341 : 66f8;    --   [0b 0110 0110 1111 1000] -> [asm:  (I):  ORI 	$t1, 0x38]
	0342 : 72ca;    --   [0b 0111 0010 1100 1010] -> [asm:  (I):  SLLI 	$t1, 0xa]
	0343 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	0344 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	0345 : 66c3;    --   [0b 0110 0110 1100 0011] -> [asm:  (I):  ORI 	$t1, 0x3]
	0346 : 72c6;    --   [0b 0111 0010 1100 0110] -> [asm:  (I):  SLLI 	$t1, 0x6]
	0347 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	0348 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	0349 : 66cc;    --   [0b 0110 0110 1100 1100] -> [asm:  (I):  ORI 	$t1, 0xc]
	034a : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	034b : 2684;    --   [0b 0010 0110 1000 0100] -> [asm: (R2):  OR 	$t0, $at]

	034c : a536;    --   [0b 1010 0101 0011 0110] -> [702: JAL   getString]
	034d : 6280;    --   [0b 0110 0010 1000 0000] -> [703: ANDI  $t0, 0]
                    --   auto-gen (0xe0cc > 5bits) <- [704: ORI   $t0, CHAR_mem]
	034e : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	034f : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	0350 : 66f8;    --   [0b 0110 0110 1111 1000] -> [asm:  (I):  ORI 	$t1, 0x38]
	0351 : 72ca;    --   [0b 0111 0010 1100 1010] -> [asm:  (I):  SLLI 	$t1, 0xa]
	0352 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	0353 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	0354 : 66c3;    --   [0b 0110 0110 1100 0011] -> [asm:  (I):  ORI 	$t1, 0x3]
	0355 : 72c6;    --   [0b 0111 0010 1100 0110] -> [asm:  (I):  SLLI 	$t1, 0x6]
	0356 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	0357 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	0358 : 66cc;    --   [0b 0110 0110 1100 1100] -> [asm:  (I):  ORI 	$t1, 0xc]
	0359 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	035a : 2684;    --   [0b 0010 0110 1000 0100] -> [asm: (R2):  OR 	$t0, $at]

	035b : a6f6;    --   [0b 1010 0110 1111 0110] -> [705: JAL   stringToInt]
	035c : 6140;    --   [0b 0110 0001 0100 0000] -> [707: ANDI  $rb, 0]
	035d : 2560;    --   [0b 0010 0101 0110 0000] -> [708: OR    $rb, $s0            # set multiplier to $rb]
	035e : 3d68;    --   [0b 0011 1101 0110 1000] -> [710: ROTL  $rb, $t0            # Shift $t0 by $rb]
	035f : 6280;    --   [0b 0110 0010 1000 0000] -> [711: ANDI  $t0, 0]
	0360 : 2694;    --   [0b 0010 0110 1001 0100] -> [712: OR    $t0, $rb]
	0361 : 6200;    --   [0b 0110 0010 0000 0000] -> [714: ANDI  $s0, 0]
	0362 : 2628;    --   [0b 0010 0110 0010 1000] -> [715: OR    $s0, $t0            # save answer]
	0363 : 6280;    --   [0b 0110 0010 1000 0000] -> [716: ANDI  $t0, 0]
                    --   auto-gen (0xe018 > 5bits) <- [717: ORI   $t0, CONST_answer]
	0364 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	0365 : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	0366 : 66f8;    --   [0b 0110 0110 1111 1000] -> [asm:  (I):  ORI 	$t1, 0x38]
	0367 : 72ca;    --   [0b 0111 0010 1100 1010] -> [asm:  (I):  SLLI 	$t1, 0xa]
	0368 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	0369 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	036a : 66c0;    --   [0b 0110 0110 1100 0000] -> [asm:  (I):  ORI 	$t1, 0x0]
	036b : 72c6;    --   [0b 0111 0010 1100 0110] -> [asm:  (I):  SLLI 	$t1, 0x6]
	036c : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	036d : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	036e : 66d8;    --   [0b 0110 0110 1101 1000] -> [asm:  (I):  ORI 	$t1, 0x18]
	036f : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	0370 : 2684;    --   [0b 0010 0110 1000 0100] -> [asm: (R2):  OR 	$t0, $at]

	0371 : a504;    --   [0b 1010 0101 0000 0100] -> [718: JAL   putString]
	0372 : 6280;    --   [0b 0110 0010 1000 0000] -> [719: ANDI  $t0, 0]
	0373 : 26a0;    --   [0b 0010 0110 1010 0000] -> [720: OR    $t0, $s0]
	0374 : a5b2;    --   [0b 1010 0101 1011 0010] -> [721: JAL   intToString         # output answer as string]
	0375 : 6280;    --   [0b 0110 0010 1000 0000] -> [723: ANDI  $t0, 0]
	0376 : 668a;    --   [0b 0110 0110 1000 1010] -> [724: ORI   $t0, 10             # add '\n']
	0377 : a43a;    --   [0b 1010 0100 0011 1010] -> [725: JAL   putchar]
	0378 : c220;    --   [0b 1100 0010 0010 0000] -> [727: LW    $ra, $sp, 0         # restore $ra and return]
	0379 : 4082;    --   [0b 0100 0000 1000 0010] -> [728: ADDI  $sp, 2]
	037a : a900;    --   [0b 1010 1001 0000 0000] -> [729: JR    $ra]
                    --   label: 037b <- [738: DEMO:]
	037b : 6280;    --   [0b 0110 0010 1000 0000] -> [739: ANDI  $t0, 0]
                    --   auto-gen (0xe024 > 5bits) <- [740: ORI   $t0, CONST_instr]
	037c : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	037d : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	037e : 66f8;    --   [0b 0110 0110 1111 1000] -> [asm:  (I):  ORI 	$t1, 0x38]
	037f : 72ca;    --   [0b 0111 0010 1100 1010] -> [asm:  (I):  SLLI 	$t1, 0xa]
	0380 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	0381 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	0382 : 66c0;    --   [0b 0110 0110 1100 0000] -> [asm:  (I):  ORI 	$t1, 0x0]
	0383 : 72c6;    --   [0b 0111 0010 1100 0110] -> [asm:  (I):  SLLI 	$t1, 0x6]
	0384 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	0385 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	0386 : 66e4;    --   [0b 0110 0110 1110 0100] -> [asm:  (I):  ORI 	$t1, 0x24]
	0387 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	0388 : 2684;    --   [0b 0010 0110 1000 0100] -> [asm: (R2):  OR 	$t0, $at]

	0389 : a504;    --   [0b 1010 0101 0000 0100] -> [741: JAL   putString]
	038a : 6280;    --   [0b 0110 0010 1000 0000] -> [743: ANDI  $t0, 0]
	038b : a4a4;    --   [0b 1010 0100 1010 0100] -> [744: JAL   getchar]
	038c : 6200;    --   [0b 0110 0010 0000 0000] -> [746: ANDI  $s0, 0]
	038d : 2628;    --   [0b 0010 0110 0010 1000] -> [747: OR    $s0, $t0]
	038e : 6280;    --   [0b 0110 0010 1000 0000] -> [748: ANDI  $t0, 0]
	038f : 668a;    --   [0b 0110 0110 1000 1010] -> [749: ORI   $t0, 10]
	0390 : a43a;    --   [0b 1010 0100 0011 1010] -> [750: JAL   putchar]
	0391 : 6180;    --   [0b 0110 0001 1000 0000] -> [752: ANDI  $rc, 0]
                    --   auto-gen (0x6d > 5bits) <- [753: ORI   $rc, 'm']
	0392 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	0393 : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	0394 : 66c0;    --   [0b 0110 0110 1100 0000] -> [asm:  (I):  ORI 	$t1, 0x0]
	0395 : 72ca;    --   [0b 0111 0010 1100 1010] -> [asm:  (I):  SLLI 	$t1, 0xa]
	0396 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	0397 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	0398 : 66c1;    --   [0b 0110 0110 1100 0001] -> [asm:  (I):  ORI 	$t1, 0x1]
	0399 : 72c6;    --   [0b 0111 0010 1100 0110] -> [asm:  (I):  SLLI 	$t1, 0x6]
	039a : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	039b : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	039c : 66ed;    --   [0b 0110 0110 1110 1101] -> [asm:  (I):  ORI 	$t1, 0x2d]
	039d : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	039e : 2584;    --   [0b 0010 0101 1000 0100] -> [asm: (R2):  OR 	$rc, $at]

	039f : 61c0;    --   [0b 0110 0001 1100 0000] -> [754: ANDI  $rd, 0]
	03a0 : 25e0;    --   [0b 0010 0101 1110 0000] -> [755: OR    $rd, $s0]
	03a1 : 6040;    --   [0b 0110 0000 0100 0000] -> [757: ANDI  $at, 0]
                    --   auto-gen (0x7bc > 5bits) <- [758: ORI   $at, TEST_multiply_service]
	03a2 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	03a3 : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	03a4 : 66c1;    --   [0b 0110 0110 1100 0001] -> [asm:  (I):  ORI 	$t1, 0x1]
	03a5 : 72ca;    --   [0b 0111 0010 1100 1010] -> [asm:  (I):  SLLI 	$t1, 0xa]
	03a6 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	03a7 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	03a8 : 66ce;    --   [0b 0110 0110 1100 1110] -> [asm:  (I):  ORI 	$t1, 0xe]
	03a9 : 72c6;    --   [0b 0111 0010 1100 0110] -> [asm:  (I):  SLLI 	$t1, 0x6]
	03aa : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	03ab : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	03ac : 66fc;    --   [0b 0110 0110 1111 1100] -> [asm:  (I):  ORI 	$t1, 0x3c]
	03ad : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	03ae : 2444;    --   [0b 0010 0100 0100 0100] -> [asm: (R2):  OR 	$at, $at]

	03af : b7e2;    --   [0b 1011 0111 1110 0010] -> [759: BNE   $rd, $rc, 2]
	03b0 : a840;    --   [0b 1010 1000 0100 0000] -> [760: JR    $at]
	03b1 : 6180;    --   [0b 0110 0001 1000 0000] -> [762: ANDI  $rc, 0]
                    --   auto-gen (0x73 > 5bits) <- [763: ORI   $rc, 's']
	03b2 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	03b3 : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	03b4 : 66c0;    --   [0b 0110 0110 1100 0000] -> [asm:  (I):  ORI 	$t1, 0x0]
	03b5 : 72ca;    --   [0b 0111 0010 1100 1010] -> [asm:  (I):  SLLI 	$t1, 0xa]
	03b6 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	03b7 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	03b8 : 66c1;    --   [0b 0110 0110 1100 0001] -> [asm:  (I):  ORI 	$t1, 0x1]
	03b9 : 72c6;    --   [0b 0111 0010 1100 0110] -> [asm:  (I):  SLLI 	$t1, 0x6]
	03ba : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	03bb : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	03bc : 66f3;    --   [0b 0110 0110 1111 0011] -> [asm:  (I):  ORI 	$t1, 0x33]
	03bd : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	03be : 2584;    --   [0b 0010 0101 1000 0100] -> [asm: (R2):  OR 	$rc, $at]

	03bf : 61c0;    --   [0b 0110 0001 1100 0000] -> [764: ANDI  $rd, 0]
	03c0 : 25e0;    --   [0b 0010 0101 1110 0000] -> [765: OR    $rd, $s0]
	03c1 : 6040;    --   [0b 0110 0000 0100 0000] -> [767: ANDI  $at, 0]
                    --   auto-gen (0x814 > 5bits) <- [768: ORI   $at, TEST_barrel_shift]
	03c2 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	03c3 : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	03c4 : 66c2;    --   [0b 0110 0110 1100 0010] -> [asm:  (I):  ORI 	$t1, 0x2]
	03c5 : 72ca;    --   [0b 0111 0010 1100 1010] -> [asm:  (I):  SLLI 	$t1, 0xa]
	03c6 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	03c7 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	03c8 : 66c0;    --   [0b 0110 0110 1100 0000] -> [asm:  (I):  ORI 	$t1, 0x0]
	03c9 : 72c6;    --   [0b 0111 0010 1100 0110] -> [asm:  (I):  SLLI 	$t1, 0x6]
	03ca : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	03cb : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	03cc : 66d4;    --   [0b 0110 0110 1101 0100] -> [asm:  (I):  ORI 	$t1, 0x14]
	03cd : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	03ce : 2444;    --   [0b 0010 0100 0100 0100] -> [asm: (R2):  OR 	$at, $at]

	03cf : b7e2;    --   [0b 1011 0111 1110 0010] -> [769: BNE   $rd, $rc, 2]
	03d0 : a840;    --   [0b 1010 1000 0100 0000] -> [770: JR    $at]
                    --   auto-gen (0x6f6 > 10bits) <- [771: J     DEMO]
	03d1 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	03d2 : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	03d3 : 66c1;    --   [0b 0110 0110 1100 0001] -> [asm:  (I):  ORI 	$t1, 0x1]
	03d4 : 72ca;    --   [0b 0111 0010 1100 1010] -> [asm:  (I):  SLLI 	$t1, 0xa]
	03d5 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	03d6 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	03d7 : 66cb;    --   [0b 0110 0110 1100 1011] -> [asm:  (I):  ORI 	$t1, 0xb]
	03d8 : 72c6;    --   [0b 0111 0010 1100 0110] -> [asm:  (I):  SLLI 	$t1, 0x6]
	03d9 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	03da : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	03db : 66f6;    --   [0b 0110 0110 1111 0110] -> [asm:  (I):  ORI 	$t1, 0x36]
	03dc : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	03dd : a850;    --   [0b 1010 1000 0101 0000] -> [asm: (R1):  JR 	$at]

                    --   label: 03de <- [776: TEST_multiply_service:]
	03de : 6280;    --   [0b 0110 0010 1000 0000] -> [777: ANDI  $t0, 0]
                    --   auto-gen (0xe088 > 5bits) <- [778: ORI   $t0, CONST_mult]
	03df : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	03e0 : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	03e1 : 66f8;    --   [0b 0110 0110 1111 1000] -> [asm:  (I):  ORI 	$t1, 0x38]
	03e2 : 72ca;    --   [0b 0111 0010 1100 1010] -> [asm:  (I):  SLLI 	$t1, 0xa]
	03e3 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	03e4 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	03e5 : 66c2;    --   [0b 0110 0110 1100 0010] -> [asm:  (I):  ORI 	$t1, 0x2]
	03e6 : 72c6;    --   [0b 0111 0010 1100 0110] -> [asm:  (I):  SLLI 	$t1, 0x6]
	03e7 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	03e8 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	03e9 : 66c8;    --   [0b 0110 0110 1100 1000] -> [asm:  (I):  ORI 	$t1, 0x8]
	03ea : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	03eb : 2684;    --   [0b 0010 0110 1000 0100] -> [asm: (R2):  OR 	$t0, $at]

	03ec : a504;    --   [0b 1010 0101 0000 0100] -> [779: JAL   putString]
	03ed : 6280;    --   [0b 0110 0010 1000 0000] -> [780: ANDI  $t0, 0]
	03ee : 668a;    --   [0b 0110 0110 1000 1010] -> [781: ORI   $t0, 10]
	03ef : a43a;    --   [0b 1010 0100 0011 1010] -> [782: JAL   putchar]
                    --   label: 03f0 <- [784: LOOP_mult:]
                    --   auto-gen (0x506 > 10bits) <- [785: JAL   multiply_service]
	03f0 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	03f1 : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	03f2 : 66c1;    --   [0b 0110 0110 1100 0001] -> [asm:  (I):  ORI 	$t1, 0x1]
	03f3 : 72ca;    --   [0b 0111 0010 1100 1010] -> [asm:  (I):  SLLI 	$t1, 0xa]
	03f4 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	03f5 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	03f6 : 66c4;    --   [0b 0110 0110 1100 0100] -> [asm:  (I):  ORI 	$t1, 0x4]
	03f7 : 72c6;    --   [0b 0111 0010 1100 0110] -> [asm:  (I):  SLLI 	$t1, 0x6]
	03f8 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	03f9 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	03fa : 66c6;    --   [0b 0110 0110 1100 0110] -> [asm:  (I):  ORI 	$t1, 0x6]
	03fb : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	03fc : ac50;    --   [0b 1010 1100 0101 0000] -> [asm: (R2):  JALR 	$at, $ra]

                    --   auto-gen (0x7e0 > 10bits) <- [786: J     LOOP_mult]
	03fd : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	03fe : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	03ff : 66c1;    --   [0b 0110 0110 1100 0001] -> [asm:  (I):  ORI 	$t1, 0x1]
	0400 : 72ca;    --   [0b 0111 0010 1100 1010] -> [asm:  (I):  SLLI 	$t1, 0xa]
	0401 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	0402 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	0403 : 66cf;    --   [0b 0110 0110 1100 1111] -> [asm:  (I):  ORI 	$t1, 0xf]
	0404 : 72c6;    --   [0b 0111 0010 1100 0110] -> [asm:  (I):  SLLI 	$t1, 0x6]
	0405 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	0406 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	0407 : 66e0;    --   [0b 0110 0110 1110 0000] -> [asm:  (I):  ORI 	$t1, 0x20]
	0408 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	0409 : a850;    --   [0b 1010 1000 0101 0000] -> [asm: (R1):  JR 	$at]

                    --   label: 040a <- [791: TEST_barrel_shift:]
	040a : 6280;    --   [0b 0110 0010 1000 0000] -> [792: ANDI  $t0, 0]
                    --   auto-gen (0xe0a6 > 5bits) <- [793: ORI   $t0, CONST_shift]
	040b : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	040c : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	040d : 66f8;    --   [0b 0110 0110 1111 1000] -> [asm:  (I):  ORI 	$t1, 0x38]
	040e : 72ca;    --   [0b 0111 0010 1100 1010] -> [asm:  (I):  SLLI 	$t1, 0xa]
	040f : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	0410 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	0411 : 66c2;    --   [0b 0110 0110 1100 0010] -> [asm:  (I):  ORI 	$t1, 0x2]
	0412 : 72c6;    --   [0b 0111 0010 1100 0110] -> [asm:  (I):  SLLI 	$t1, 0x6]
	0413 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	0414 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	0415 : 66e6;    --   [0b 0110 0110 1110 0110] -> [asm:  (I):  ORI 	$t1, 0x26]
	0416 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	0417 : 2684;    --   [0b 0010 0110 1000 0100] -> [asm: (R2):  OR 	$t0, $at]

	0418 : a504;    --   [0b 1010 0101 0000 0100] -> [794: JAL   putString]
	0419 : 6280;    --   [0b 0110 0010 1000 0000] -> [795: ANDI  $t0, 0]
	041a : 668a;    --   [0b 0110 0110 1000 1010] -> [796: ORI   $t0, 10]
	041b : a43a;    --   [0b 1010 0100 0011 1010] -> [797: JAL   putchar]
                    --   label: 041c <- [799: LOOP_rotl:]
                    --   auto-gen (0x5fc > 10bits) <- [800: JAL   barrel_shift_service]
	041c : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	041d : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	041e : 66c1;    --   [0b 0110 0110 1100 0001] -> [asm:  (I):  ORI 	$t1, 0x1]
	041f : 72ca;    --   [0b 0111 0010 1100 1010] -> [asm:  (I):  SLLI 	$t1, 0xa]
	0420 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	0421 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	0422 : 66c7;    --   [0b 0110 0110 1100 0111] -> [asm:  (I):  ORI 	$t1, 0x7]
	0423 : 72c6;    --   [0b 0111 0010 1100 0110] -> [asm:  (I):  SLLI 	$t1, 0x6]
	0424 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	0425 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	0426 : 66fc;    --   [0b 0110 0110 1111 1100] -> [asm:  (I):  ORI 	$t1, 0x3c]
	0427 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	0428 : ac50;    --   [0b 1010 1100 0101 0000] -> [asm: (R2):  JALR 	$at, $ra]

                    --   auto-gen (0x838 > 10bits) <- [801: J     LOOP_rotl]
	0429 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	042a : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	042b : 66c2;    --   [0b 0110 0110 1100 0010] -> [asm:  (I):  ORI 	$t1, 0x2]
	042c : 72ca;    --   [0b 0111 0010 1100 1010] -> [asm:  (I):  SLLI 	$t1, 0xa]
	042d : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	042e : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	042f : 66c0;    --   [0b 0110 0110 1100 0000] -> [asm:  (I):  ORI 	$t1, 0x0]
	0430 : 72c6;    --   [0b 0111 0010 1100 0110] -> [asm:  (I):  SLLI 	$t1, 0x6]
	0431 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	0432 : 22c0;    --   [0b 0010 0010 1100 0000] -> [asm: (R2):  AND 	$t1, $r0]
	0433 : 66f8;    --   [0b 0110 0110 1111 1000] -> [asm:  (I):  ORI 	$t1, 0x38]
	0434 : 246c;    --   [0b 0010 0100 0110 1100] -> [asm: (R2):  OR 	$at, $t1]
	0435 : a850;    --   [0b 1010 1000 0101 0000] -> [asm: (R1):  JR 	$at]

                    --   label: 0436 <- [805: PROGRAM_END:]
END;
