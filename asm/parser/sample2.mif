DEPTH = 32768;
WIDTH = 16;
ADDRESS_RADIX = HEX;
DATA_RADIX = HEX;
CONTENT
BEGIN
	0000 : 0004;    --   [0b 0000 0000 0000 0100] -> [6: ADD $r0, $at  # abc]
	0002 : 0804;    --   [0b 0000 1000 0000 0100] -> [7: MUL $r0, $at # abcd]
	0004 : aa80;    --   [0b 1010 1010 1000 0000] -> [11: JR $t0]
	0006 : d000;    --   [0b 1101 0000 0000 0000] -> [12: MFHI $r0]
	0008 : d000;    --   [0b 1101 0000 0000 0000] -> [13: MFHI $r0 # abc]
	000a : 0804;    --   [0b 0000 1000 0000 0100] -> [19: MUL $r0, $at]
	000c : a0ff;    --   [0b 1010 0000 1111 1111] -> [21: J 0x0ff #abc]
	000e : a4ff;    --   [0b 1010 0100 1111 1111] -> [22: JAL 0x0ff #abc]
                    --   auto-gen (0xf > 3bits) <- [24: LW $r0, $at, 0xf  # ok]
	0010 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	0012 : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	0014 : 6680;    --   [0b 0110 0110 1000 0000] -> [asm:  (I):  ORI 	$t0, 0x0]
	0016 : 728a;    --   [0b 0111 0010 1000 1010] -> [asm:  (I):  SLLI 	$t0, 0xa]
	0018 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	001a : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	001c : 6680;    --   [0b 0110 0110 1000 0000] -> [asm:  (I):  ORI 	$t0, 0x0]
	001e : 7286;    --   [0b 0111 0010 1000 0110] -> [asm:  (I):  SLLI 	$t0, 0x6]
	0020 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	0022 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	0024 : 668f;    --   [0b 0110 0110 1000 1111] -> [asm:  (I):  ORI 	$t0, 0xf]
	0026 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	0028 : 0044;    --   [0b 0000 0000 0100 0100] -> [asm: (R2):  ADD 	$at, $at]
	002a : c010;    --   [0b 1100 0000 0001 0000] -> [asm:  (O):  LW 	$r0, $at, 0x0]

	002c : b254;    --   [0b 1011 0010 0101 0100] -> [25: BEQ $ra, $rb, 0x4 # ok]
	002e : 0004;    --   [0b 0000 0000 0000 0100] -> [28: ADD $r0, $at  # abc]
	0030 : 0804;    --   [0b 0000 1000 0000 0100] -> [30: MUL $r0, $at # abcd]
	0032 : 4807;    --   [0b 0100 1000 0000 0111] -> [32: MULI $r0, 0x7 # abcd]
	0034 : 4407;    --   [0b 0100 0100 0000 0111] -> [34: SUBI $r0, 0x7 # abcd]
                    --   auto-gen (0x3f > 5bits) <- [35: SUBI $r0, 63 # abcd]
	0036 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	0038 : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	003a : 6680;    --   [0b 0110 0110 1000 0000] -> [asm:  (I):  ORI 	$t0, 0x0]
	003c : 728a;    --   [0b 0111 0010 1000 1010] -> [asm:  (I):  SLLI 	$t0, 0xa]
	003e : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	0040 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	0042 : 6680;    --   [0b 0110 0110 1000 0000] -> [asm:  (I):  ORI 	$t0, 0x0]
	0044 : 7286;    --   [0b 0111 0010 1000 0110] -> [asm:  (I):  SLLI 	$t0, 0x6]
	0046 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	0048 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	004a : 66bf;    --   [0b 0110 0110 1011 1111] -> [asm:  (I):  ORI 	$t0, 0x3f]
	004c : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	004e : 0404;    --   [0b 0000 0100 0000 0100] -> [asm: (R2):  SUB 	$r0, $at]

	0050 : 4407;    --   [0b 0100 0100 0000 0111] -> [36: SUBI $r0, 0b111 # abcd]
                    --   auto-gen (0xf > 3bits) <- [38: LW $r0, $r0, 0xf]
	0052 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	0054 : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	0056 : 6680;    --   [0b 0110 0110 1000 0000] -> [asm:  (I):  ORI 	$t0, 0x0]
	0058 : 728a;    --   [0b 0111 0010 1000 1010] -> [asm:  (I):  SLLI 	$t0, 0xa]
	005a : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	005c : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	005e : 6680;    --   [0b 0110 0110 1000 0000] -> [asm:  (I):  ORI 	$t0, 0x0]
	0060 : 7286;    --   [0b 0111 0010 1000 0110] -> [asm:  (I):  SLLI 	$t0, 0x6]
	0062 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	0064 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	0066 : 668f;    --   [0b 0110 0110 1000 1111] -> [asm:  (I):  ORI 	$t0, 0xf]
	0068 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	006a : 0040;    --   [0b 0000 0000 0100 0000] -> [asm: (R2):  ADD 	$at, $r0]
	006c : c010;    --   [0b 1100 0000 0001 0000] -> [asm:  (O):  LW 	$r0, $at, 0x0]

                    --   auto-gen (0xf > 3bits) <- [39: LW $r0, $r0, 15]
	006e : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	0070 : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	0072 : 6680;    --   [0b 0110 0110 1000 0000] -> [asm:  (I):  ORI 	$t0, 0x0]
	0074 : 728a;    --   [0b 0111 0010 1000 1010] -> [asm:  (I):  SLLI 	$t0, 0xa]
	0076 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	0078 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	007a : 6680;    --   [0b 0110 0110 1000 0000] -> [asm:  (I):  ORI 	$t0, 0x0]
	007c : 7286;    --   [0b 0111 0010 1000 0110] -> [asm:  (I):  SLLI 	$t0, 0x6]
	007e : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	0080 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	0082 : 668f;    --   [0b 0110 0110 1000 1111] -> [asm:  (I):  ORI 	$t0, 0xf]
	0084 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	0086 : 0040;    --   [0b 0000 0000 0100 0000] -> [asm: (R2):  ADD 	$at, $r0]
	0088 : c010;    --   [0b 1100 0000 0001 0000] -> [asm:  (O):  LW 	$r0, $at, 0x0]

                    --   auto-gen (0xf > 3bits) <- [40: LW $r0, $r0, 0b1111]
	008a : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	008c : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	008e : 6680;    --   [0b 0110 0110 1000 0000] -> [asm:  (I):  ORI 	$t0, 0x0]
	0090 : 728a;    --   [0b 0111 0010 1000 1010] -> [asm:  (I):  SLLI 	$t0, 0xa]
	0092 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	0094 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	0096 : 6680;    --   [0b 0110 0110 1000 0000] -> [asm:  (I):  ORI 	$t0, 0x0]
	0098 : 7286;    --   [0b 0111 0010 1000 0110] -> [asm:  (I):  SLLI 	$t0, 0x6]
	009a : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	009c : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	009e : 668f;    --   [0b 0110 0110 1000 1111] -> [asm:  (I):  ORI 	$t0, 0xf]
	00a0 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	00a2 : 0040;    --   [0b 0000 0000 0100 0000] -> [asm: (R2):  ADD 	$at, $r0]
	00a4 : c010;    --   [0b 1100 0000 0001 0000] -> [asm:  (O):  LW 	$r0, $at, 0x0]

	00a6 : a40f;    --   [0b 1010 0100 0000 1111] -> [42: JAL 0x00f #abc]
	00a8 : a40f;    --   [0b 1010 0100 0000 1111] -> [43: JAL 15 #abc]
	00aa : a40f;    --   [0b 1010 0100 0000 1111] -> [44: JAL 0b00001111 #abc]
	00ac : a7ff;    --   [0b 1010 0111 1111 1111] -> [45: JAL 1023 #abc]
	00b6 : 4407;    --   [0b 0100 0100 0000 0111] -> [52: SUBI $r0, 0x7     # after label1]
                    --   auto-gen (0x3f > 5bits) <- [54: SUBI $r0, 63      # after label2: .equ 0x8]
	00b8 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	00ba : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	00bc : 6680;    --   [0b 0110 0110 1000 0000] -> [asm:  (I):  ORI 	$t0, 0x0]
	00be : 728a;    --   [0b 0111 0010 1000 1010] -> [asm:  (I):  SLLI 	$t0, 0xa]
	00c0 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	00c2 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	00c4 : 6680;    --   [0b 0110 0110 1000 0000] -> [asm:  (I):  ORI 	$t0, 0x0]
	00c6 : 7286;    --   [0b 0111 0010 1000 0110] -> [asm:  (I):  SLLI 	$t0, 0x6]
	00c8 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	00ca : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	00cc : 66bf;    --   [0b 0110 0110 1011 1111] -> [asm:  (I):  ORI 	$t0, 0x3f]
	00ce : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	00d0 : 0404;    --   [0b 0000 0100 0000 0100] -> [asm: (R2):  SUB 	$r0, $at]

	00d2 : 4404;    --   [0b 0100 0100 0000 0100] -> [56: SUBI $r0, 0b1 + 0b11 # after label3: .equ $ + 0xfb]
                    --   auto-gen (0xb6 > 5bits) <- [58: ADDI $r0, label1     # 0]
	f700 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	f702 : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	f704 : 6680;    --   [0b 0110 0110 1000 0000] -> [asm:  (I):  ORI 	$t0, 0x0]
	f706 : 728a;    --   [0b 0111 0010 1000 1010] -> [asm:  (I):  SLLI 	$t0, 0xa]
	f708 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	f70a : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	f70c : 6682;    --   [0b 0110 0110 1000 0010] -> [asm:  (I):  ORI 	$t0, 0x2]
	f70e : 7286;    --   [0b 0111 0010 1000 0110] -> [asm:  (I):  SLLI 	$t0, 0x6]
	f710 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	f712 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	f714 : 66b6;    --   [0b 0110 0110 1011 0110] -> [asm:  (I):  ORI 	$t0, 0x36]
	f716 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	f718 : 0004;    --   [0b 0000 0000 0000 0100] -> [asm: (R2):  ADD 	$r0, $at]

	f71a : 4008;    --   [0b 0100 0000 0000 1000] -> [59: ADDI $r0, label2     # 8]
                    --   auto-gen (0x1cd > 5bits) <- [60: ADDI $r0, label3     # 255]
	f71c : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	f71e : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	f720 : 6680;    --   [0b 0110 0110 1000 0000] -> [asm:  (I):  ORI 	$t0, 0x0]
	f722 : 728a;    --   [0b 0111 0010 1000 1010] -> [asm:  (I):  SLLI 	$t0, 0xa]
	f724 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	f726 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	f728 : 6687;    --   [0b 0110 0110 1000 0111] -> [asm:  (I):  ORI 	$t0, 0x7]
	f72a : 7286;    --   [0b 0111 0010 1000 0110] -> [asm:  (I):  SLLI 	$t0, 0x6]
	f72c : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	f72e : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	f730 : 668d;    --   [0b 0110 0110 1000 1101] -> [asm:  (I):  ORI 	$t0, 0xd]
	f732 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	f734 : 0004;    --   [0b 0000 0000 0000 0100] -> [asm: (R2):  ADD 	$r0, $at]

                    --   auto-gen (0x20 > 5bits) <- [61: ADDI $r0, label2 * 4 # 32]
	f736 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	f738 : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	f73a : 6680;    --   [0b 0110 0110 1000 0000] -> [asm:  (I):  ORI 	$t0, 0x0]
	f73c : 728a;    --   [0b 0111 0010 1000 1010] -> [asm:  (I):  SLLI 	$t0, 0xa]
	f73e : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	f740 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	f742 : 6680;    --   [0b 0110 0110 1000 0000] -> [asm:  (I):  ORI 	$t0, 0x0]
	f744 : 7286;    --   [0b 0111 0010 1000 0110] -> [asm:  (I):  SLLI 	$t0, 0x6]
	f746 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	f748 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	f74a : 66a0;    --   [0b 0110 0110 1010 0000] -> [asm:  (I):  ORI 	$t0, 0x20]
	f74c : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	f74e : 0004;    --   [0b 0000 0000 0000 0100] -> [asm: (R2):  ADD 	$r0, $at]

                    --   auto-gen (0xf850 > 5bits) <- [63: ADDI $r0, $      # after .space 0x100]
	f850 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	f852 : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	f854 : 66be;    --   [0b 0110 0110 1011 1110] -> [asm:  (I):  ORI 	$t0, 0x3e]
	f856 : 728a;    --   [0b 0111 0010 1000 1010] -> [asm:  (I):  SLLI 	$t0, 0xa]
	f858 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	f85a : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	f85c : 6681;    --   [0b 0110 0110 1000 0001] -> [asm:  (I):  ORI 	$t0, 0x1]
	f85e : 7286;    --   [0b 0111 0010 1000 0110] -> [asm:  (I):  SLLI 	$t0, 0x6]
	f860 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	f862 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	f864 : 6690;    --   [0b 0110 0110 1001 0000] -> [asm:  (I):  ORI 	$t0, 0x10]
	f866 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	f868 : 0004;    --   [0b 0000 0000 0000 0100] -> [asm: (R2):  ADD 	$r0, $at]

                    --   auto-gen (0xf86b > 5bits) <- [64: ADDI $r0, $ + 0x01]
	f86a : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	f86c : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	f86e : 66be;    --   [0b 0110 0110 1011 1110] -> [asm:  (I):  ORI 	$t0, 0x3e]
	f870 : 728a;    --   [0b 0111 0010 1000 1010] -> [asm:  (I):  SLLI 	$t0, 0xa]
	f872 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	f874 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	f876 : 6681;    --   [0b 0110 0110 1000 0001] -> [asm:  (I):  ORI 	$t0, 0x1]
	f878 : 7286;    --   [0b 0111 0010 1000 0110] -> [asm:  (I):  SLLI 	$t0, 0x6]
	f87a : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	f87c : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	f87e : 66ab;    --   [0b 0110 0110 1010 1011] -> [asm:  (I):  ORI 	$t0, 0x2b]
	f880 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	f882 : 0004;    --   [0b 0000 0000 0000 0100] -> [asm: (R2):  ADD 	$r0, $at]

	f884 : 400a;    --   [0b 0100 0000 0000 1010] -> [66: ADDI $r0, 0xa]
	f886 : 400a;    --   [0b 0100 0000 0000 1010] -> [67: ADDI $r0, '\n']
                    --   auto-gen (0x61 > 5bits) <- [68: ADDI $r0, 'a']
	f888 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	f88a : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	f88c : 6680;    --   [0b 0110 0110 1000 0000] -> [asm:  (I):  ORI 	$t0, 0x0]
	f88e : 728a;    --   [0b 0111 0010 1000 1010] -> [asm:  (I):  SLLI 	$t0, 0xa]
	f890 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	f892 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	f894 : 6681;    --   [0b 0110 0110 1000 0001] -> [asm:  (I):  ORI 	$t0, 0x1]
	f896 : 7286;    --   [0b 0111 0010 1000 0110] -> [asm:  (I):  SLLI 	$t0, 0x6]
	f898 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	f89a : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	f89c : 66a1;    --   [0b 0110 0110 1010 0001] -> [asm:  (I):  ORI 	$t0, 0x21]
	f89e : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	f8a0 : 0004;    --   [0b 0000 0000 0000 0100] -> [asm: (R2):  ADD 	$r0, $at]

	f8c0 : 400f;    --   [0b 0100 0000 0000 1111] -> [70: ADDI $r0, 0xf    # after .align 5]
	0002 : 4001;    --   [0b 0100 0000 0000 0001] -> [72: label5: ADDI $r0, 0x1]
	0004 : 4002;    --   [0b 0100 0000 0000 0010] -> [73: ADDI $r0, label5  # hoge]
                    --   auto-gen (0x61 > 5bits) <- [74: ADDI $r0, label4]
	0006 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	0008 : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	000a : 6680;    --   [0b 0110 0110 1000 0000] -> [asm:  (I):  ORI 	$t0, 0x0]
	000c : 728a;    --   [0b 0111 0010 1000 1010] -> [asm:  (I):  SLLI 	$t0, 0xa]
	000e : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	0010 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	0012 : 6681;    --   [0b 0110 0110 1000 0001] -> [asm:  (I):  ORI 	$t0, 0x1]
	0014 : 7286;    --   [0b 0111 0010 1000 0110] -> [asm:  (I):  SLLI 	$t0, 0x6]
	0016 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	0018 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	001a : 66a1;    --   [0b 0110 0110 1010 0001] -> [asm:  (I):  ORI 	$t0, 0x21]
	001c : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	001e : 0004;    --   [0b 0000 0000 0000 0100] -> [asm: (R2):  ADD 	$r0, $at]

                    --   auto-gen (0x20 > 5bits) <- [76: SUBI $r0, $]
	0020 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	0022 : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	0024 : 6680;    --   [0b 0110 0110 1000 0000] -> [asm:  (I):  ORI 	$t0, 0x0]
	0026 : 728a;    --   [0b 0111 0010 1000 1010] -> [asm:  (I):  SLLI 	$t0, 0xa]
	0028 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	002a : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	002c : 6680;    --   [0b 0110 0110 1000 0000] -> [asm:  (I):  ORI 	$t0, 0x0]
	002e : 7286;    --   [0b 0111 0010 1000 0110] -> [asm:  (I):  SLLI 	$t0, 0x6]
	0030 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	0032 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	0034 : 66a0;    --   [0b 0110 0110 1010 0000] -> [asm:  (I):  ORI 	$t0, 0x20]
	0036 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	0038 : 0404;    --   [0b 0000 0100 0000 0100] -> [asm: (R2):  SUB 	$r0, $at]

	003a : 4404;    --   [0b 0100 0100 0000 0100] -> [77: SUBI $r0, label6]
	003c : 4408;    --   [0b 0100 0100 0000 1000] -> [78: SUBI $r0, label6 * 2]
	00f0 : 0001;    --   [0b 0000 0000 0000 0001] -> [.word: 0x0001]
	00f2 : 0002;    --   [0b 0000 0000 0000 0010] -> [.word: 0x0002]
	00f4 : 0003;    --   [0b 0000 0000 0000 0011] -> [.word: 0x0003]
	00f6 : 0001;    --   [0b 0000 0000 0000 0001] -> [.byte: 0x01]
	00f7 : 0002;    --   [0b 0000 0000 0000 0010] -> [.byte: 0x02]
	00f8 : 0003;    --   [0b 0000 0000 0000 0011] -> [.byte: 0x03]
	0000 : 0008;    --   [0b 0000 0000 0000 1000] -> [.half: 0x08]
	0001 : 0009;    --   [0b 0000 0000 0000 1001] -> [.half: 0x09]
	0002 : 000a;    --   [0b 0000 0000 0000 1010] -> [.half: 0x0a]
	0003 : 000b;    --   [0b 0000 0000 0000 1011] -> [.half: 0x0b]
	0004 : 0068;    --   [0b 0000 0000 0110 1000] -> [.ascii  "hello!": h]
	0005 : 0065;    --   [0b 0000 0000 0110 0101] -> [.ascii  "hello!": e]
	0006 : 006c;    --   [0b 0000 0000 0110 1100] -> [.ascii  "hello!": l]
	0007 : 006c;    --   [0b 0000 0000 0110 1100] -> [.ascii  "hello!": l]
	0008 : 006f;    --   [0b 0000 0000 0110 1111] -> [.ascii  "hello!": o]
	0009 : 0021;    --   [0b 0000 0000 0010 0001] -> [.ascii  "hello!": !]
	000a : 0068;    --   [0b 0000 0000 0110 1000] -> [.asciiz "hello!" # test .ascii "hoge": h]
	000b : 0065;    --   [0b 0000 0000 0110 0101] -> [.asciiz "hello!" # test .ascii "hoge": e]
	000c : 006c;    --   [0b 0000 0000 0110 1100] -> [.asciiz "hello!" # test .ascii "hoge": l]
	000d : 006c;    --   [0b 0000 0000 0110 1100] -> [.asciiz "hello!" # test .ascii "hoge": l]
	000e : 006f;    --   [0b 0000 0000 0110 1111] -> [.asciiz "hello!" # test .ascii "hoge": o]
	000f : 0021;    --   [0b 0000 0000 0010 0001] -> [.asciiz "hello!" # test .ascii "hoge": !]
	0010 : 0000;    --   [0b 0000 0000 0000 0000] -> [.asciiz "hello!" # test .ascii "hoge": ]
                    --   auto-gen (0x3f > 5bits) <- [91: ADDI $rd, 0b111111]
	0011 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	0013 : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	0015 : 6680;    --   [0b 0110 0110 1000 0000] -> [asm:  (I):  ORI 	$t0, 0x0]
	0017 : 728a;    --   [0b 0111 0010 1000 1010] -> [asm:  (I):  SLLI 	$t0, 0xa]
	0019 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	001b : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	001d : 6680;    --   [0b 0110 0110 1000 0000] -> [asm:  (I):  ORI 	$t0, 0x0]
	001f : 7286;    --   [0b 0111 0010 1000 0110] -> [asm:  (I):  SLLI 	$t0, 0x6]
	0021 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	0023 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	0025 : 66bf;    --   [0b 0110 0110 1011 1111] -> [asm:  (I):  ORI 	$t0, 0x3f]
	0027 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	0029 : 01c4;    --   [0b 0000 0001 1100 0100] -> [asm: (R2):  ADD 	$rd, $at]

                    --   auto-gen (0x7f > 5bits) <- [92: SUBI $rd, 0b1111111  # too big]
	002b : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	002d : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	002f : 6680;    --   [0b 0110 0110 1000 0000] -> [asm:  (I):  ORI 	$t0, 0x0]
	0031 : 728a;    --   [0b 0111 0010 1000 1010] -> [asm:  (I):  SLLI 	$t0, 0xa]
	0033 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	0035 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	0037 : 6681;    --   [0b 0110 0110 1000 0001] -> [asm:  (I):  ORI 	$t0, 0x1]
	0039 : 7286;    --   [0b 0111 0010 1000 0110] -> [asm:  (I):  SLLI 	$t0, 0x6]
	003b : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	003d : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	003f : 66bf;    --   [0b 0110 0110 1011 1111] -> [asm:  (I):  ORI 	$t0, 0x3f]
	0041 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	0043 : 05c4;    --   [0b 0000 0101 1100 0100] -> [asm: (R2):  SUB 	$rd, $at]

                    --   auto-gen (0x20 > 5bits) <- [96: ADDI $r0, 0b100000]
	0045 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	0047 : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	0049 : 6680;    --   [0b 0110 0110 1000 0000] -> [asm:  (I):  ORI 	$t0, 0x0]
	004b : 728a;    --   [0b 0111 0010 1000 1010] -> [asm:  (I):  SLLI 	$t0, 0xa]
	004d : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	004f : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	0051 : 6680;    --   [0b 0110 0110 1000 0000] -> [asm:  (I):  ORI 	$t0, 0x0]
	0053 : 7286;    --   [0b 0111 0010 1000 0110] -> [asm:  (I):  SLLI 	$t0, 0x6]
	0055 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	0057 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	0059 : 66a0;    --   [0b 0110 0110 1010 0000] -> [asm:  (I):  ORI 	$t0, 0x20]
	005b : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	005d : 0004;    --   [0b 0000 0000 0000 0100] -> [asm: (R2):  ADD 	$r0, $at]

                    --   auto-gen (0x40 > 5bits) <- [97: ADDI $r0, 0b1000000 # too big]
	005f : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	0061 : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	0063 : 6680;    --   [0b 0110 0110 1000 0000] -> [asm:  (I):  ORI 	$t0, 0x0]
	0065 : 728a;    --   [0b 0111 0010 1000 1010] -> [asm:  (I):  SLLI 	$t0, 0xa]
	0067 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	0069 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	006b : 6681;    --   [0b 0110 0110 1000 0001] -> [asm:  (I):  ORI 	$t0, 0x1]
	006d : 7286;    --   [0b 0111 0010 1000 0110] -> [asm:  (I):  SLLI 	$t0, 0x6]
	006f : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	0071 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	0073 : 6680;    --   [0b 0110 0110 1000 0000] -> [asm:  (I):  ORI 	$t0, 0x0]
	0075 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	0077 : 0004;    --   [0b 0000 0000 0000 0100] -> [asm: (R2):  ADD 	$r0, $at]

	0079 : 403f;    --   [0b 0100 0000 0011 1111] -> [98: ADDI $r0, -1 # too big]
                    --   auto-gen (0x3f > 5bits) <- [101: ADDI $rd, 0b111111]
	007b : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	007d : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	007f : 6680;    --   [0b 0110 0110 1000 0000] -> [asm:  (I):  ORI 	$t0, 0x0]
	0081 : 728a;    --   [0b 0111 0010 1000 1010] -> [asm:  (I):  SLLI 	$t0, 0xa]
	0083 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	0085 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	0087 : 6680;    --   [0b 0110 0110 1000 0000] -> [asm:  (I):  ORI 	$t0, 0x0]
	0089 : 7286;    --   [0b 0111 0010 1000 0110] -> [asm:  (I):  SLLI 	$t0, 0x6]
	008b : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	008d : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	008f : 66bf;    --   [0b 0110 0110 1011 1111] -> [asm:  (I):  ORI 	$t0, 0x3f]
	0091 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	0093 : 01c4;    --   [0b 0000 0001 1100 0100] -> [asm: (R2):  ADD 	$rd, $at]

                    --   auto-gen (0x7f > 5bits) <- [102: SUBI $rd, 0b1111111  # too big]
	0095 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	0097 : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	0099 : 6680;    --   [0b 0110 0110 1000 0000] -> [asm:  (I):  ORI 	$t0, 0x0]
	009b : 728a;    --   [0b 0111 0010 1000 1010] -> [asm:  (I):  SLLI 	$t0, 0xa]
	009d : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	009f : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	00a1 : 6681;    --   [0b 0110 0110 1000 0001] -> [asm:  (I):  ORI 	$t0, 0x1]
	00a3 : 7286;    --   [0b 0111 0010 1000 0110] -> [asm:  (I):  SLLI 	$t0, 0x6]
	00a5 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	00a7 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	00a9 : 66bf;    --   [0b 0110 0110 1011 1111] -> [asm:  (I):  ORI 	$t0, 0x3f]
	00ab : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	00ad : 05c4;    --   [0b 0000 0101 1100 0100] -> [asm: (R2):  SUB 	$rd, $at]

	00af : a3ff;    --   [0b 1010 0011 1111 1111] -> [104: J 0b1111111111]
                    --   auto-gen (0x7ff > 10bits) <- [105: J 0b11111111111  # too big]
	00b1 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	00b3 : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	00b5 : 6681;    --   [0b 0110 0110 1000 0001] -> [asm:  (I):  ORI 	$t0, 0x1]
	00b7 : 728a;    --   [0b 0111 0010 1000 1010] -> [asm:  (I):  SLLI 	$t0, 0xa]
	00b9 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	00bb : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	00bd : 668f;    --   [0b 0110 0110 1000 1111] -> [asm:  (I):  ORI 	$t0, 0xf]
	00bf : 7286;    --   [0b 0111 0010 1000 0110] -> [asm:  (I):  SLLI 	$t0, 0x6]
	00c1 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	00c3 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	00c5 : 66bf;    --   [0b 0110 0110 1011 1111] -> [asm:  (I):  ORI 	$t0, 0x3f]
	00c7 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	00c9 : a850;    --   [0b 1010 1000 0101 0000] -> [asm: (R1):  JR 	$at]

	00cb : a3ff;    --   [0b 1010 0011 1111 1111] -> [106: J -1  # too big]
	00cd : a7ff;    --   [0b 1010 0111 1111 1111] -> [108: JAL 0b1111111111]
                    --   auto-gen (0x7ff > 10bits) <- [109: JAL 0b11111111111  # too big]
	00cf : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	00d1 : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	00d3 : 6681;    --   [0b 0110 0110 1000 0001] -> [asm:  (I):  ORI 	$t0, 0x1]
	00d5 : 728a;    --   [0b 0111 0010 1000 1010] -> [asm:  (I):  SLLI 	$t0, 0xa]
	00d7 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	00d9 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	00db : 668f;    --   [0b 0110 0110 1000 1111] -> [asm:  (I):  ORI 	$t0, 0xf]
	00dd : 7286;    --   [0b 0111 0010 1000 0110] -> [asm:  (I):  SLLI 	$t0, 0x6]
	00df : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	00e1 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	00e3 : 66bf;    --   [0b 0110 0110 1011 1111] -> [asm:  (I):  ORI 	$t0, 0x3f]
	00e5 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	00e7 : ac50;    --   [0b 1010 1100 0101 0000] -> [asm: (R2):  JALR 	$at, $ra]

	00e9 : a7ff;    --   [0b 1010 0111 1111 1111] -> [110: JAL -1]
                    --   auto-gen (0xf > 3bits) <- [112: BEQ $r0, $r0, 0b1111]
	00eb : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	00ed : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	00ef : 6680;    --   [0b 0110 0110 1000 0000] -> [asm:  (I):  ORI 	$t0, 0x0]
	00f1 : 728a;    --   [0b 0111 0010 1000 1010] -> [asm:  (I):  SLLI 	$t0, 0xa]
	00f3 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	00f5 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	00f7 : 6680;    --   [0b 0110 0110 1000 0000] -> [asm:  (I):  ORI 	$t0, 0x0]
	00f9 : 7286;    --   [0b 0111 0010 1000 0110] -> [asm:  (I):  SLLI 	$t0, 0x6]
	00fb : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	00fd : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	00ff : 668f;    --   [0b 0110 0110 1000 1111] -> [asm:  (I):  ORI 	$t0, 0xf]
	0101 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	0103 : 0400;    --   [0b 0000 0100 0000 0000] -> [asm: (R2):  SUB 	$r0, $r0]
	0105 : a109;    --   [0b 1010 0001 0000 1001] -> [asm:  (J):  J 	0x109]
	0107 : a840;    --   [0b 1010 1000 0100 0000] -> [asm: (R1):  JR 	$at]
	0109 : b00f;    --   [0b 1011 0000 0000 1111] -> [asm:  (O):  BEQ 	$r0, $r0, 0xf]

                    --   auto-gen (0x1f > 3bits) <- [113: BEQ $r0, $r0, 0b11111  # too big]
	010b : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	010d : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	010f : 6680;    --   [0b 0110 0110 1000 0000] -> [asm:  (I):  ORI 	$t0, 0x0]
	0111 : 728a;    --   [0b 0111 0010 1000 1010] -> [asm:  (I):  SLLI 	$t0, 0xa]
	0113 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	0115 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	0117 : 6680;    --   [0b 0110 0110 1000 0000] -> [asm:  (I):  ORI 	$t0, 0x0]
	0119 : 7286;    --   [0b 0111 0010 1000 0110] -> [asm:  (I):  SLLI 	$t0, 0x6]
	011b : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	011d : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	011f : 669f;    --   [0b 0110 0110 1001 1111] -> [asm:  (I):  ORI 	$t0, 0x1f]
	0121 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	0123 : 0400;    --   [0b 0000 0100 0000 0000] -> [asm: (R2):  SUB 	$r0, $r0]
	0125 : a129;    --   [0b 1010 0001 0010 1001] -> [asm:  (J):  J 	0x129]
	0127 : a840;    --   [0b 1010 1000 0100 0000] -> [asm: (R1):  JR 	$at]
	0129 : b00f;    --   [0b 1011 0000 0000 1111] -> [asm:  (O):  BEQ 	$r0, $r0, 0xf]

	012b : b00f;    --   [0b 1011 0000 0000 1111] -> [114: BEQ $r0, $r0, -1  # too big]
                    --   auto-gen (0xf > 3bits) <- [116: BNE $r0, $r0, 0b1111]
	012d : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	012f : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	0131 : 6680;    --   [0b 0110 0110 1000 0000] -> [asm:  (I):  ORI 	$t0, 0x0]
	0133 : 728a;    --   [0b 0111 0010 1000 1010] -> [asm:  (I):  SLLI 	$t0, 0xa]
	0135 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	0137 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	0139 : 6680;    --   [0b 0110 0110 1000 0000] -> [asm:  (I):  ORI 	$t0, 0x0]
	013b : 7286;    --   [0b 0111 0010 1000 0110] -> [asm:  (I):  SLLI 	$t0, 0x6]
	013d : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	013f : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	0141 : 668f;    --   [0b 0110 0110 1000 1111] -> [asm:  (I):  ORI 	$t0, 0xf]
	0143 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	0145 : 0400;    --   [0b 0000 0100 0000 0000] -> [asm: (R2):  SUB 	$r0, $r0]
	0147 : a14b;    --   [0b 1010 0001 0100 1011] -> [asm:  (J):  J 	0x14b]
	0149 : a840;    --   [0b 1010 1000 0100 0000] -> [asm: (R1):  JR 	$at]
	014b : b40f;    --   [0b 1011 0100 0000 1111] -> [asm:  (O):  BNE 	$r0, $r0, 0xf]

                    --   auto-gen (0x1f > 3bits) <- [117: BNE $r0, $r0, 0b11111  # too big]
	014d : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	014f : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	0151 : 6680;    --   [0b 0110 0110 1000 0000] -> [asm:  (I):  ORI 	$t0, 0x0]
	0153 : 728a;    --   [0b 0111 0010 1000 1010] -> [asm:  (I):  SLLI 	$t0, 0xa]
	0155 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	0157 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	0159 : 6680;    --   [0b 0110 0110 1000 0000] -> [asm:  (I):  ORI 	$t0, 0x0]
	015b : 7286;    --   [0b 0111 0010 1000 0110] -> [asm:  (I):  SLLI 	$t0, 0x6]
	015d : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	015f : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	0161 : 669f;    --   [0b 0110 0110 1001 1111] -> [asm:  (I):  ORI 	$t0, 0x1f]
	0163 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	0165 : 0400;    --   [0b 0000 0100 0000 0000] -> [asm: (R2):  SUB 	$r0, $r0]
	0167 : a16b;    --   [0b 1010 0001 0110 1011] -> [asm:  (J):  J 	0x16b]
	0169 : a840;    --   [0b 1010 1000 0100 0000] -> [asm: (R1):  JR 	$at]
	016b : b40f;    --   [0b 1011 0100 0000 1111] -> [asm:  (O):  BNE 	$r0, $r0, 0xf]

	016d : b65f;    --   [0b 1011 0110 0101 1111] -> [118: BNE $ra, $rb, -1  # too big]
                    --   auto-gen (0xf > 3bits) <- [120: LW $ra, $rb, 0b1111]
	016f : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	0171 : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	0173 : 6680;    --   [0b 0110 0110 1000 0000] -> [asm:  (I):  ORI 	$t0, 0x0]
	0175 : 728a;    --   [0b 0111 0010 1000 1010] -> [asm:  (I):  SLLI 	$t0, 0xa]
	0177 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	0179 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	017b : 6680;    --   [0b 0110 0110 1000 0000] -> [asm:  (I):  ORI 	$t0, 0x0]
	017d : 7286;    --   [0b 0111 0010 1000 0110] -> [asm:  (I):  SLLI 	$t0, 0x6]
	017f : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	0181 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	0183 : 668f;    --   [0b 0110 0110 1000 1111] -> [asm:  (I):  ORI 	$t0, 0xf]
	0185 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	0187 : 0054;    --   [0b 0000 0000 0101 0100] -> [asm: (R2):  ADD 	$at, $rb]
	0189 : c210;    --   [0b 1100 0010 0001 0000] -> [asm:  (O):  LW 	$ra, $at, 0x0]

                    --   auto-gen (0x1f > 3bits) <- [121: LW $ra, $rb, 0b11111 # too big]
	018b : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	018d : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	018f : 6680;    --   [0b 0110 0110 1000 0000] -> [asm:  (I):  ORI 	$t0, 0x0]
	0191 : 728a;    --   [0b 0111 0010 1000 1010] -> [asm:  (I):  SLLI 	$t0, 0xa]
	0193 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	0195 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	0197 : 6680;    --   [0b 0110 0110 1000 0000] -> [asm:  (I):  ORI 	$t0, 0x0]
	0199 : 7286;    --   [0b 0111 0010 1000 0110] -> [asm:  (I):  SLLI 	$t0, 0x6]
	019b : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	019d : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	019f : 669f;    --   [0b 0110 0110 1001 1111] -> [asm:  (I):  ORI 	$t0, 0x1f]
	01a1 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	01a3 : 0054;    --   [0b 0000 0000 0101 0100] -> [asm: (R2):  ADD 	$at, $rb]
	01a5 : c210;    --   [0b 1100 0010 0001 0000] -> [asm:  (O):  LW 	$ra, $at, 0x0]

                    --   auto-gen (0x10 > 3bits) <- [122: LW $ra, $rb, 16 # too big]
	01a7 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	01a9 : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	01ab : 6680;    --   [0b 0110 0110 1000 0000] -> [asm:  (I):  ORI 	$t0, 0x0]
	01ad : 728a;    --   [0b 0111 0010 1000 1010] -> [asm:  (I):  SLLI 	$t0, 0xa]
	01af : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	01b1 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	01b3 : 6680;    --   [0b 0110 0110 1000 0000] -> [asm:  (I):  ORI 	$t0, 0x0]
	01b5 : 7286;    --   [0b 0111 0010 1000 0110] -> [asm:  (I):  SLLI 	$t0, 0x6]
	01b7 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	01b9 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	01bb : 6690;    --   [0b 0110 0110 1001 0000] -> [asm:  (I):  ORI 	$t0, 0x10]
	01bd : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	01bf : 0054;    --   [0b 0000 0000 0101 0100] -> [asm: (R2):  ADD 	$at, $rb]
	01c1 : c210;    --   [0b 1100 0010 0001 0000] -> [asm:  (O):  LW 	$ra, $at, 0x0]

                    --   auto-gen (0xf > 3bits) <- [124: SB $ra, $rb, 0b1111]
	01c3 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	01c5 : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	01c7 : 6680;    --   [0b 0110 0110 1000 0000] -> [asm:  (I):  ORI 	$t0, 0x0]
	01c9 : 728a;    --   [0b 0111 0010 1000 1010] -> [asm:  (I):  SLLI 	$t0, 0xa]
	01cb : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	01cd : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	01cf : 6680;    --   [0b 0110 0110 1000 0000] -> [asm:  (I):  ORI 	$t0, 0x0]
	01d1 : 7286;    --   [0b 0111 0010 1000 0110] -> [asm:  (I):  SLLI 	$t0, 0x6]
	01d3 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	01d5 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	01d7 : 668f;    --   [0b 0110 0110 1000 1111] -> [asm:  (I):  ORI 	$t0, 0xf]
	01d9 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	01db : 0054;    --   [0b 0000 0000 0101 0100] -> [asm: (R2):  ADD 	$at, $rb]
	01dd : ce10;    --   [0b 1100 1110 0001 0000] -> [asm:  (O):  SB 	$ra, $at, 0x0]

                    --   auto-gen (0x1f > 3bits) <- [125: SB $ra, $rb, 0b11111 # too big]
	01df : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	01e1 : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	01e3 : 6680;    --   [0b 0110 0110 1000 0000] -> [asm:  (I):  ORI 	$t0, 0x0]
	01e5 : 728a;    --   [0b 0111 0010 1000 1010] -> [asm:  (I):  SLLI 	$t0, 0xa]
	01e7 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	01e9 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	01eb : 6680;    --   [0b 0110 0110 1000 0000] -> [asm:  (I):  ORI 	$t0, 0x0]
	01ed : 7286;    --   [0b 0111 0010 1000 0110] -> [asm:  (I):  SLLI 	$t0, 0x6]
	01ef : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	01f1 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	01f3 : 669f;    --   [0b 0110 0110 1001 1111] -> [asm:  (I):  ORI 	$t0, 0x1f]
	01f5 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	01f7 : 0054;    --   [0b 0000 0000 0101 0100] -> [asm: (R2):  ADD 	$at, $rb]
	01f9 : ce10;    --   [0b 1100 1110 0001 0000] -> [asm:  (O):  SB 	$ra, $at, 0x0]

	01fb : ce5f;    --   [0b 1100 1110 0101 1111] -> [126: SB $ra, $rb, -1 # too big]
	01fd : 0040;    --   [0b 0000 0000 0100 0000] -> [129: ADD $at, $r0]
                    --   auto-gen (0x69 > 5bits) <- [131: ADDI $r0, tag]
	0207 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	0209 : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	020b : 6680;    --   [0b 0110 0110 1000 0000] -> [asm:  (I):  ORI 	$t0, 0x0]
	020d : 728a;    --   [0b 0111 0010 1000 1010] -> [asm:  (I):  SLLI 	$t0, 0xa]
	020f : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	0211 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	0213 : 6681;    --   [0b 0110 0110 1000 0001] -> [asm:  (I):  ORI 	$t0, 0x1]
	0215 : 7286;    --   [0b 0111 0010 1000 0110] -> [asm:  (I):  SLLI 	$t0, 0x6]
	0217 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	0219 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	021b : 66a9;    --   [0b 0110 0110 1010 1001] -> [asm:  (I):  ORI 	$t0, 0x29]
	021d : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	021f : 0004;    --   [0b 0000 0000 0000 0100] -> [asm: (R2):  ADD 	$r0, $at]

	0221 : 2000;    --   [0b 0010 0000 0000 0000] -> [135: AND $r0, $r0]
                    --   auto-gen (0x223 > 5bits) <- [138: ADDI $r0, tag1]
	0231 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	0233 : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	0235 : 6680;    --   [0b 0110 0110 1000 0000] -> [asm:  (I):  ORI 	$t0, 0x0]
	0237 : 728a;    --   [0b 0111 0010 1000 1010] -> [asm:  (I):  SLLI 	$t0, 0xa]
	0239 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	023b : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	023d : 6688;    --   [0b 0110 0110 1000 1000] -> [asm:  (I):  ORI 	$t0, 0x8]
	023f : 7286;    --   [0b 0111 0010 1000 0110] -> [asm:  (I):  SLLI 	$t0, 0x6]
	0241 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	0243 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	0245 : 66a3;    --   [0b 0110 0110 1010 0011] -> [asm:  (I):  ORI 	$t0, 0x23]
	0247 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	0249 : 0004;    --   [0b 0000 0000 0000 0100] -> [asm: (R2):  ADD 	$r0, $at]

                    --   auto-gen (0x87 > 5bits) <- [139: ADDI $r0, tag2]
	024b : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	024d : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	024f : 6680;    --   [0b 0110 0110 1000 0000] -> [asm:  (I):  ORI 	$t0, 0x0]
	0251 : 728a;    --   [0b 0111 0010 1000 1010] -> [asm:  (I):  SLLI 	$t0, 0xa]
	0253 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	0255 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	0257 : 6682;    --   [0b 0110 0110 1000 0010] -> [asm:  (I):  ORI 	$t0, 0x2]
	0259 : 7286;    --   [0b 0111 0010 1000 0110] -> [asm:  (I):  SLLI 	$t0, 0x6]
	025b : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	025d : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	025f : 6687;    --   [0b 0110 0110 1000 0111] -> [asm:  (I):  ORI 	$t0, 0x7]
	0261 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	0263 : 0004;    --   [0b 0000 0000 0000 0100] -> [asm: (R2):  ADD 	$r0, $at]

                    --   auto-gen (0x265 > 5bits) <- [140: ADDI $r0, $]
	0265 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	0267 : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	0269 : 6680;    --   [0b 0110 0110 1000 0000] -> [asm:  (I):  ORI 	$t0, 0x0]
	026b : 728a;    --   [0b 0111 0010 1000 1010] -> [asm:  (I):  SLLI 	$t0, 0xa]
	026d : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	026f : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	0271 : 6689;    --   [0b 0110 0110 1000 1001] -> [asm:  (I):  ORI 	$t0, 0x9]
	0273 : 7286;    --   [0b 0111 0010 1000 0110] -> [asm:  (I):  SLLI 	$t0, 0x6]
	0275 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	0277 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	0279 : 66a5;    --   [0b 0110 0110 1010 0101] -> [asm:  (I):  ORI 	$t0, 0x25]
	027b : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	027d : 0004;    --   [0b 0000 0000 0000 0100] -> [asm: (R2):  ADD 	$r0, $at]

                    --   auto-gen (0x3f > 5bits) <- [143: ORI $at, 0b111111]
	027f : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	0281 : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	0283 : 6680;    --   [0b 0110 0110 1000 0000] -> [asm:  (I):  ORI 	$t0, 0x0]
	0285 : 728a;    --   [0b 0111 0010 1000 1010] -> [asm:  (I):  SLLI 	$t0, 0xa]
	0287 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	0289 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	028b : 6680;    --   [0b 0110 0110 1000 0000] -> [asm:  (I):  ORI 	$t0, 0x0]
	028d : 7286;    --   [0b 0111 0010 1000 0110] -> [asm:  (I):  SLLI 	$t0, 0x6]
	028f : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	0291 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	0293 : 66bf;    --   [0b 0110 0110 1011 1111] -> [asm:  (I):  ORI 	$t0, 0x3f]
	0295 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	0297 : 2444;    --   [0b 0010 0100 0100 0100] -> [asm: (R2):  OR 	$at, $at]

                    --   auto-gen (0x30 > 5bits) <- [144: ORI $at, '0']
	0299 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	029b : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	029d : 6680;    --   [0b 0110 0110 1000 0000] -> [asm:  (I):  ORI 	$t0, 0x0]
	029f : 728a;    --   [0b 0111 0010 1000 1010] -> [asm:  (I):  SLLI 	$t0, 0xa]
	02a1 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	02a3 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	02a5 : 6680;    --   [0b 0110 0110 1000 0000] -> [asm:  (I):  ORI 	$t0, 0x0]
	02a7 : 7286;    --   [0b 0111 0010 1000 0110] -> [asm:  (I):  SLLI 	$t0, 0x6]
	02a9 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	02ab : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	02ad : 66b0;    --   [0b 0110 0110 1011 0000] -> [asm:  (I):  ORI 	$t0, 0x30]
	02af : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	02b1 : 2444;    --   [0b 0010 0100 0100 0100] -> [asm: (R2):  OR 	$at, $at]

	02b3 : 0050;    --   [0b 0000 0000 0101 0000] -> [CONST_prompt1: .asciiz "Please enter the first number: ": P]
	02b4 : 006c;    --   [0b 0000 0000 0110 1100] -> [CONST_prompt1: .asciiz "Please enter the first number: ": l]
	02b5 : 0065;    --   [0b 0000 0000 0110 0101] -> [CONST_prompt1: .asciiz "Please enter the first number: ": e]
	02b6 : 0061;    --   [0b 0000 0000 0110 0001] -> [CONST_prompt1: .asciiz "Please enter the first number: ": a]
	02b7 : 0073;    --   [0b 0000 0000 0111 0011] -> [CONST_prompt1: .asciiz "Please enter the first number: ": s]
	02b8 : 0065;    --   [0b 0000 0000 0110 0101] -> [CONST_prompt1: .asciiz "Please enter the first number: ": e]
	02b9 : 0020;    --   [0b 0000 0000 0010 0000] -> [CONST_prompt1: .asciiz "Please enter the first number: ":  ]
	02ba : 0065;    --   [0b 0000 0000 0110 0101] -> [CONST_prompt1: .asciiz "Please enter the first number: ": e]
	02bb : 006e;    --   [0b 0000 0000 0110 1110] -> [CONST_prompt1: .asciiz "Please enter the first number: ": n]
	02bc : 0074;    --   [0b 0000 0000 0111 0100] -> [CONST_prompt1: .asciiz "Please enter the first number: ": t]
	02bd : 0065;    --   [0b 0000 0000 0110 0101] -> [CONST_prompt1: .asciiz "Please enter the first number: ": e]
	02be : 0072;    --   [0b 0000 0000 0111 0010] -> [CONST_prompt1: .asciiz "Please enter the first number: ": r]
	02bf : 0020;    --   [0b 0000 0000 0010 0000] -> [CONST_prompt1: .asciiz "Please enter the first number: ":  ]
	02c0 : 0074;    --   [0b 0000 0000 0111 0100] -> [CONST_prompt1: .asciiz "Please enter the first number: ": t]
	02c1 : 0068;    --   [0b 0000 0000 0110 1000] -> [CONST_prompt1: .asciiz "Please enter the first number: ": h]
	02c2 : 0065;    --   [0b 0000 0000 0110 0101] -> [CONST_prompt1: .asciiz "Please enter the first number: ": e]
	02c3 : 0020;    --   [0b 0000 0000 0010 0000] -> [CONST_prompt1: .asciiz "Please enter the first number: ":  ]
	02c4 : 0066;    --   [0b 0000 0000 0110 0110] -> [CONST_prompt1: .asciiz "Please enter the first number: ": f]
	02c5 : 0069;    --   [0b 0000 0000 0110 1001] -> [CONST_prompt1: .asciiz "Please enter the first number: ": i]
	02c6 : 0072;    --   [0b 0000 0000 0111 0010] -> [CONST_prompt1: .asciiz "Please enter the first number: ": r]
	02c7 : 0073;    --   [0b 0000 0000 0111 0011] -> [CONST_prompt1: .asciiz "Please enter the first number: ": s]
	02c8 : 0074;    --   [0b 0000 0000 0111 0100] -> [CONST_prompt1: .asciiz "Please enter the first number: ": t]
	02c9 : 0020;    --   [0b 0000 0000 0010 0000] -> [CONST_prompt1: .asciiz "Please enter the first number: ":  ]
	02ca : 006e;    --   [0b 0000 0000 0110 1110] -> [CONST_prompt1: .asciiz "Please enter the first number: ": n]
	02cb : 0075;    --   [0b 0000 0000 0111 0101] -> [CONST_prompt1: .asciiz "Please enter the first number: ": u]
	02cc : 006d;    --   [0b 0000 0000 0110 1101] -> [CONST_prompt1: .asciiz "Please enter the first number: ": m]
	02cd : 0062;    --   [0b 0000 0000 0110 0010] -> [CONST_prompt1: .asciiz "Please enter the first number: ": b]
	02ce : 0065;    --   [0b 0000 0000 0110 0101] -> [CONST_prompt1: .asciiz "Please enter the first number: ": e]
	02cf : 0072;    --   [0b 0000 0000 0111 0010] -> [CONST_prompt1: .asciiz "Please enter the first number: ": r]
	02d0 : 003a;    --   [0b 0000 0000 0011 1010] -> [CONST_prompt1: .asciiz "Please enter the first number: ": :]
	02d1 : 0020;    --   [0b 0000 0000 0010 0000] -> [CONST_prompt1: .asciiz "Please enter the first number: ":  ]
	02d2 : 0000;    --   [0b 0000 0000 0000 0000] -> [CONST_prompt1: .asciiz "Please enter the first number: ": ]
                    --   auto-gen (0x2d3 > 5bits) <- [146: ORI $at, $]
	02d3 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	02d5 : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	02d7 : 6680;    --   [0b 0110 0110 1000 0000] -> [asm:  (I):  ORI 	$t0, 0x0]
	02d9 : 728a;    --   [0b 0111 0010 1000 1010] -> [asm:  (I):  SLLI 	$t0, 0xa]
	02db : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	02dd : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	02df : 668b;    --   [0b 0110 0110 1000 1011] -> [asm:  (I):  ORI 	$t0, 0xb]
	02e1 : 7286;    --   [0b 0111 0010 1000 0110] -> [asm:  (I):  SLLI 	$t0, 0x6]
	02e3 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	02e5 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	02e7 : 6693;    --   [0b 0110 0110 1001 0011] -> [asm:  (I):  ORI 	$t0, 0x13]
	02e9 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	02eb : 2444;    --   [0b 0010 0100 0100 0100] -> [asm: (R2):  OR 	$at, $at]

	0020 : 0062;    --   [0b 0000 0000 0110 0010] -> [tag: .asciiz "b: ": b]
	0021 : 003a;    --   [0b 0000 0000 0011 1010] -> [tag: .asciiz "b: ": :]
	0022 : 0020;    --   [0b 0000 0000 0010 0000] -> [tag: .asciiz "b: ":  ]
	0023 : 0000;    --   [0b 0000 0000 0000 0000] -> [tag: .asciiz "b: ": ]
                    --   auto-gen (0x69 > 5bits) <- [150: ADDI $r0, tag]
	0024 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	0026 : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	0028 : 6680;    --   [0b 0110 0110 1000 0000] -> [asm:  (I):  ORI 	$t0, 0x0]
	002a : 728a;    --   [0b 0111 0010 1000 1010] -> [asm:  (I):  SLLI 	$t0, 0xa]
	002c : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	002e : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	0030 : 6681;    --   [0b 0110 0110 1000 0001] -> [asm:  (I):  ORI 	$t0, 0x1]
	0032 : 7286;    --   [0b 0111 0010 1000 0110] -> [asm:  (I):  SLLI 	$t0, 0x6]
	0034 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	0036 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	0038 : 66a9;    --   [0b 0110 0110 1010 1001] -> [asm:  (I):  ORI 	$t0, 0x29]
	003a : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	003c : 0004;    --   [0b 0000 0000 0000 0100] -> [asm: (R2):  ADD 	$r0, $at]

	003e : 0061;    --   [0b 0000 0000 0110 0001] -> [CONST_prompt1: .asciiz "a: ": a]
	003f : 003a;    --   [0b 0000 0000 0011 1010] -> [CONST_prompt1: .asciiz "a: ": :]
	0040 : 0020;    --   [0b 0000 0000 0010 0000] -> [CONST_prompt1: .asciiz "a: ":  ]
	0041 : 0000;    --   [0b 0000 0000 0000 0000] -> [CONST_prompt1: .asciiz "a: ": ]
                    --   auto-gen (0x69 > 5bits) <- [156: ADDI $r0, tag]
	001d : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	001f : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	0021 : 6680;    --   [0b 0110 0110 1000 0000] -> [asm:  (I):  ORI 	$t0, 0x0]
	0023 : 728a;    --   [0b 0111 0010 1000 1010] -> [asm:  (I):  SLLI 	$t0, 0xa]
	0025 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	0027 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	0029 : 6681;    --   [0b 0110 0110 1000 0001] -> [asm:  (I):  ORI 	$t0, 0x1]
	002b : 7286;    --   [0b 0111 0010 1000 0110] -> [asm:  (I):  SLLI 	$t0, 0x6]
	002d : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	002f : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	0031 : 66a9;    --   [0b 0110 0110 1010 1001] -> [asm:  (I):  ORI 	$t0, 0x29]
	0033 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	0035 : 0004;    --   [0b 0000 0000 0000 0100] -> [asm: (R2):  ADD 	$r0, $at]

                    --   auto-gen (0x87 > 5bits) <- [157: ADDI $r0, tag2]
	0037 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	0039 : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	003b : 6680;    --   [0b 0110 0110 1000 0000] -> [asm:  (I):  ORI 	$t0, 0x0]
	003d : 728a;    --   [0b 0111 0010 1000 1010] -> [asm:  (I):  SLLI 	$t0, 0xa]
	003f : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	0041 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	0043 : 6682;    --   [0b 0110 0110 1000 0010] -> [asm:  (I):  ORI 	$t0, 0x2]
	0045 : 7286;    --   [0b 0111 0010 1000 0110] -> [asm:  (I):  SLLI 	$t0, 0x6]
	0047 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	0049 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	004b : 6687;    --   [0b 0110 0110 1000 0111] -> [asm:  (I):  ORI 	$t0, 0x7]
	004d : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	004f : 0004;    --   [0b 0000 0000 0000 0100] -> [asm: (R2):  ADD 	$r0, $at]

                    --   auto-gen (0x69 > 5bits) <- [158: ADDI $r0, tag]
	0051 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	0053 : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	0055 : 6680;    --   [0b 0110 0110 1000 0000] -> [asm:  (I):  ORI 	$t0, 0x0]
	0057 : 728a;    --   [0b 0111 0010 1000 1010] -> [asm:  (I):  SLLI 	$t0, 0xa]
	0059 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	005b : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	005d : 6681;    --   [0b 0110 0110 1000 0001] -> [asm:  (I):  ORI 	$t0, 0x1]
	005f : 7286;    --   [0b 0111 0010 1000 0110] -> [asm:  (I):  SLLI 	$t0, 0x6]
	0061 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	0063 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	0065 : 66a9;    --   [0b 0110 0110 1010 1001] -> [asm:  (I):  ORI 	$t0, 0x29]
	0067 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	0069 : 0004;    --   [0b 0000 0000 0000 0100] -> [asm: (R2):  ADD 	$r0, $at]

                    --   auto-gen (0xc3 > 5bits) <- [160: tag: ADDI  $r0, tag3]
	006b : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	006d : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	006f : 6680;    --   [0b 0110 0110 1000 0000] -> [asm:  (I):  ORI 	$t0, 0x0]
	0071 : 728a;    --   [0b 0111 0010 1000 1010] -> [asm:  (I):  SLLI 	$t0, 0xa]
	0073 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	0075 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	0077 : 6683;    --   [0b 0110 0110 1000 0011] -> [asm:  (I):  ORI 	$t0, 0x3]
	0079 : 7286;    --   [0b 0111 0010 1000 0110] -> [asm:  (I):  SLLI 	$t0, 0x6]
	007b : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	007d : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	007f : 6683;    --   [0b 0110 0110 1000 0011] -> [asm:  (I):  ORI 	$t0, 0x3]
	0081 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	0083 : 0004;    --   [0b 0000 0000 0000 0100] -> [asm: (R2):  ADD 	$r0, $at]

	0085 : 4001;    --   [0b 0100 0000 0000 0001] -> [161: tag2: ADDI $r0, 1]
	0087 : 0061;    --   [0b 0000 0000 0110 0001] -> [CONST_prompt1: .asciiz "a: ": a]
	0088 : 003a;    --   [0b 0000 0000 0011 1010] -> [CONST_prompt1: .asciiz "a: ": :]
	0089 : 0020;    --   [0b 0000 0000 0010 0000] -> [CONST_prompt1: .asciiz "a: ":  ]
	008a : 0000;    --   [0b 0000 0000 0000 0000] -> [CONST_prompt1: .asciiz "a: ": ]
	008b : 0062;    --   [0b 0000 0000 0110 0010] -> [tag: .asciiz "b: ": b]
	008c : 003a;    --   [0b 0000 0000 0011 1010] -> [tag: .asciiz "b: ": :]
	008d : 0020;    --   [0b 0000 0000 0010 0000] -> [tag: .asciiz "b: ":  ]
	008e : 0000;    --   [0b 0000 0000 0000 0000] -> [tag: .asciiz "b: ": ]
                    --   auto-gen (0x69 > 5bits) <- [164: ADDI $r0, tag]
	008f : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	0091 : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	0093 : 6680;    --   [0b 0110 0110 1000 0000] -> [asm:  (I):  ORI 	$t0, 0x0]
	0095 : 728a;    --   [0b 0111 0010 1000 1010] -> [asm:  (I):  SLLI 	$t0, 0xa]
	0097 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	0099 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	009b : 6681;    --   [0b 0110 0110 1000 0001] -> [asm:  (I):  ORI 	$t0, 0x1]
	009d : 7286;    --   [0b 0111 0010 1000 0110] -> [asm:  (I):  SLLI 	$t0, 0x6]
	009f : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	00a1 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	00a3 : 66a9;    --   [0b 0110 0110 1010 1001] -> [asm:  (I):  ORI 	$t0, 0x29]
	00a5 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	00a7 : 0004;    --   [0b 0000 0000 0000 0100] -> [asm: (R2):  ADD 	$r0, $at]

                    --   auto-gen (0x87 > 5bits) <- [165: ADDI $ra, tag2]
	00a9 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	00ab : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	00ad : 6680;    --   [0b 0110 0110 1000 0000] -> [asm:  (I):  ORI 	$t0, 0x0]
	00af : 728a;    --   [0b 0111 0010 1000 1010] -> [asm:  (I):  SLLI 	$t0, 0xa]
	00b1 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	00b3 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	00b5 : 6682;    --   [0b 0110 0110 1000 0010] -> [asm:  (I):  ORI 	$t0, 0x2]
	00b7 : 7286;    --   [0b 0111 0010 1000 0110] -> [asm:  (I):  SLLI 	$t0, 0x6]
	00b9 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	00bb : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	00bd : 6687;    --   [0b 0110 0110 1000 0111] -> [asm:  (I):  ORI 	$t0, 0x7]
	00bf : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	00c1 : 0104;    --   [0b 0000 0001 0000 0100] -> [asm: (R2):  ADD 	$ra, $at]

	00c3 : 0100;    --   [0b 0000 0001 0000 0000] -> [166: tag3: ADD $ra, $r0]
                    --   auto-gen (0x87 > 5bits) <- [167: tag4: ADDI $ra, tag2]
	00c5 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	00c7 : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	00c9 : 6680;    --   [0b 0110 0110 1000 0000] -> [asm:  (I):  ORI 	$t0, 0x0]
	00cb : 728a;    --   [0b 0111 0010 1000 1010] -> [asm:  (I):  SLLI 	$t0, 0xa]
	00cd : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	00cf : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	00d1 : 6682;    --   [0b 0110 0110 1000 0010] -> [asm:  (I):  ORI 	$t0, 0x2]
	00d3 : 7286;    --   [0b 0111 0010 1000 0110] -> [asm:  (I):  SLLI 	$t0, 0x6]
	00d5 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	00d7 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	00d9 : 6687;    --   [0b 0110 0110 1000 0111] -> [asm:  (I):  ORI 	$t0, 0x7]
	00db : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	00dd : 0104;    --   [0b 0000 0001 0000 0100] -> [asm: (R2):  ADD 	$ra, $at]

                    --   auto-gen (0x69 > 5bits) <- [171: ADDI $r0, tag]
	001d : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	001f : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	0021 : 6680;    --   [0b 0110 0110 1000 0000] -> [asm:  (I):  ORI 	$t0, 0x0]
	0023 : 728a;    --   [0b 0111 0010 1000 1010] -> [asm:  (I):  SLLI 	$t0, 0xa]
	0025 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	0027 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	0029 : 6681;    --   [0b 0110 0110 1000 0001] -> [asm:  (I):  ORI 	$t0, 0x1]
	002b : 7286;    --   [0b 0111 0010 1000 0110] -> [asm:  (I):  SLLI 	$t0, 0x6]
	002d : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	002f : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	0031 : 66a9;    --   [0b 0110 0110 1010 1001] -> [asm:  (I):  ORI 	$t0, 0x29]
	0033 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	0035 : 0004;    --   [0b 0000 0000 0000 0100] -> [asm: (R2):  ADD 	$r0, $at]

                    --   auto-gen (0x69 > 5bits) <- [172: ADDI $r0, tag]
	0037 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	0039 : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	003b : 6680;    --   [0b 0110 0110 1000 0000] -> [asm:  (I):  ORI 	$t0, 0x0]
	003d : 728a;    --   [0b 0111 0010 1000 1010] -> [asm:  (I):  SLLI 	$t0, 0xa]
	003f : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	0041 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	0043 : 6681;    --   [0b 0110 0110 1000 0001] -> [asm:  (I):  ORI 	$t0, 0x1]
	0045 : 7286;    --   [0b 0111 0010 1000 0110] -> [asm:  (I):  SLLI 	$t0, 0x6]
	0047 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	0049 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	004b : 66a9;    --   [0b 0110 0110 1010 1001] -> [asm:  (I):  ORI 	$t0, 0x29]
	004d : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	004f : 0004;    --   [0b 0000 0000 0000 0100] -> [asm: (R2):  ADD 	$r0, $at]

	0051 : 0062;    --   [0b 0000 0000 0110 0010] -> [tag: .asciiz "b: ": b]
	0052 : 003a;    --   [0b 0000 0000 0011 1010] -> [tag: .asciiz "b: ": :]
	0053 : 0020;    --   [0b 0000 0000 0010 0000] -> [tag: .asciiz "b: ":  ]
	0054 : 0000;    --   [0b 0000 0000 0000 0000] -> [tag: .asciiz "b: ": ]
                    --   auto-gen (0x87 > 5bits) <- [179: ADDI $r0, tag2]
	0055 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	0057 : 2040;    --   [0b 0010 0000 0100 0000] -> [asm: (R2):  AND 	$at, $r0]
	0059 : 6680;    --   [0b 0110 0110 1000 0000] -> [asm:  (I):  ORI 	$t0, 0x0]
	005b : 728a;    --   [0b 0111 0010 1000 1010] -> [asm:  (I):  SLLI 	$t0, 0xa]
	005d : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	005f : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	0061 : 6682;    --   [0b 0110 0110 1000 0010] -> [asm:  (I):  ORI 	$t0, 0x2]
	0063 : 7286;    --   [0b 0111 0010 1000 0110] -> [asm:  (I):  SLLI 	$t0, 0x6]
	0065 : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	0067 : 2280;    --   [0b 0010 0010 1000 0000] -> [asm: (R2):  AND 	$t0, $r0]
	0069 : 6687;    --   [0b 0110 0110 1000 0111] -> [asm:  (I):  ORI 	$t0, 0x7]
	006b : 2468;    --   [0b 0010 0100 0110 1000] -> [asm: (R2):  OR 	$at, $t0]
	006d : 0004;    --   [0b 0000 0000 0000 0100] -> [asm: (R2):  ADD 	$r0, $at]

	006f : 4001;    --   [0b 0100 0000 0000 0001] -> [181: tag2: ADDI $r0, 1]
END;
